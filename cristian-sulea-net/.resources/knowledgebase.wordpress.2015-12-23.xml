<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.3.1" created="2015-12-23 12:54" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Knowledge Base</title>
	<link>http://cristian.sulea.net/blog</link>
	<description>An archive of my personal knowledge base.</description>
	<pubDate>Wed, 23 Dec 2015 12:54:23 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://cristian.sulea.net/blog</wp:base_site_url>
	<wp:base_blog_url>http://cristian.sulea.net/blog</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>cristian.sulea</wp:author_login><wp:author_email>cristian@sulea.net</wp:author_email><wp:author_display_name><![CDATA[Cristian Sulea]]></wp:author_display_name><wp:author_first_name><![CDATA[Cristian]]></wp:author_first_name><wp:author_last_name><![CDATA[Sulea]]></wp:author_last_name></wp:author>


	<generator>http://wordpress.org/?v=4.3.1</generator>

	<item>
		<title>Spring - Quick start tutorial</title>
		<link>http://cristian.sulea.net/blog/spring-quick-start-tutorial/</link>
		<pubDate>Mon, 27 May 2013 15:02:06 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=7</guid>
		<description></description>
		<content:encoded><![CDATA[The <a href="http://spring.io">Spring Framework</a> is an open source application framework and inversion of control container for the Java platform. The framework's core features can be used by any Java application, but there are extensions for building web applications on top of the Java EE platform. Although the framework does not impose any specific programming model, it has become popular in the Java community as an alternative to, replacement for, or even addition to the Enterprise JavaBean (EJB) model. (<a href="http://en.wikipedia.org/wiki/Spring_Framework">Wikipedia / Spring Framework</a>)

A key element of Spring is infrastructural support at the application level: Spring focuses on the "plumbing" of enterprise applications so that teams can focus on application-level business logic, without unnecessary ties to specific deployment environments.

<h2>Spring dependencies</h2>

The Spring dependencies are available for download via <a href="http://search.maven.org">Maven Central Repository</a>.

[code lang="xml" title="pom.xml" highlight="17-21"]
&lt;project
    xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0
                        http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
 
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
 
    &lt;groupId&gt;spring-tutorials&lt;/groupId&gt;
    &lt;artifactId&gt;spring-quick-tutorial&lt;/artifactId&gt;
    &lt;version&gt;1.0&lt;/version&gt;
 
    &lt;name&gt;Spring - Quick tutorial&lt;/name&gt;
 
    &lt;dependencies&gt;
 
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework&lt;/groupId&gt;
            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
            &lt;version&gt;3.1.4.RELEASE&lt;/version&gt;
        &lt;/dependency&gt;
 
    &lt;/dependencies&gt;
 
&lt;/project&gt;
[/code]

<h2>Spring bean (the java class)</h2>

[code lang="java" title="SpringBean.java" highlight="8, 18-20"]

package spring.quick.tutorial;
 
/**
 * A simple spring bean.
 */
public class SpringBean {
 
    private String name;
 
    public void setName(String name) {
        this.name = name;
    }
 
    public String getName() {
        return name;
    }
 
    public void printName() {
        System.out.println(&quot;name: &quot; + name);
    }
}
[/code]

<h2>Spring bean configuration file</h2>

[code lang="xml" title="spring.xml" highlight="7-9"]
&lt;beans
    xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd&quot;&gt;
 
    &lt;bean id=&quot;bean&quot; class=&quot;spring.quick.tutorial.SpringBean&quot;&gt;
        &lt;property name=&quot;name&quot; value=&quot;Cristian Sulea&quot; /&gt;
    &lt;/bean&gt;
 
&lt;/beans&gt;
[/code]

<h2>Run It</h2>

[code lang="java" title="SpringQuickTutorial.java" highlight="10, 11, 13"]

package spring.quick.tutorial;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class SpringQuickTutorial {

    public static void main(String[] args) {

        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;spring.xml&quot;);
        SpringBean bean = (SpringBean) context.getBean(&quot;bean&quot;);

        bean.printName();
    }
}
[/code]

Output:

[code]
name: Cristian Sulea
[/code]

<h2>Resources</h2>
<ul>
	<li><a href="http://spring.io">http://spring.io</a></li>
	<li><a href="http://en.wikipedia.org/wiki/Spring_Framework">http://en.wikipedia.org/wiki/Spring_Framework</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>7</wp:post_id>
		<wp:post_date>2013-05-27 18:02:06</wp:post_date>
		<wp:post_date_gmt>2013-05-27 15:02:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>spring-quick-start-tutorial</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="category" nicename="spring"><![CDATA[Spring]]></category>
		<category domain="post_tag" nicename="spring"><![CDATA[spring]]></category>
		<category domain="post_tag" nicename="tutorial"><![CDATA[tutorial]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_10c22ec962244ee05f72b0e4bd288164</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_57f31d08ed683839c9ce32c9396e89d7</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Disable browser caching with meta HTML tags</title>
		<link>http://cristian.sulea.net/blog/disable-browser-caching-with-meta-html-tags/</link>
		<pubDate>Tue, 14 Jan 2014 16:56:41 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=48</guid>
		<description></description>
		<content:encoded><![CDATA[The correct minimum set of headers that works across the most important browsers:

[code]
Cache-Control: no-cache, no-store, must-revalidate
Pragma: no-cache
Expires: 0
[/code]

Where:
<ul>
	<li><code>Cache-Control</code> is for <strong>HTTP 1.1</strong></li>
	<li><code>Pragma</code> is for <strong>HTTP 1.0</strong></li>
	<li><code>Expires</code> is for <strong>proxies</strong></li>
</ul>
For the <strong>Web Pages (HTML)</strong> add the following <code>&lt;meta&gt;</code> tags to the page(s) you want to keep browsers from caching (the code must be in the <code>&lt;head&gt;</code> section of your page, for example right after <code>&lt;title&gt;</code> tag):

[code lang="html"]
&lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-cache, no-store, must-revalidate&quot; /&gt;
&lt;meta http-equiv=&quot;Pragma&quot; content=&quot;no-cache&quot; /&gt;
&lt;meta http-equiv=&quot;Expires&quot; content=&quot;0&quot; /&gt;
[/code]

<strong>.htaccess (Apache)</strong>

[code lang="c"]
&lt;IfModule mod_headers.c&gt;
  Header set Cache-Control &quot;no-cache, no-store, must-revalidate&quot;
  Header set Pragma &quot;no-cache&quot;
  Header set Expires 0
&lt;/IfModule&gt;
[/code]

<strong>Java Servlet</strong>

[code lang="java"]
response.setHeader(&quot;Cache-Control&quot;, &quot;no-cache, no-store, must-revalidate&quot;);
response.setHeader(&quot;Pragma&quot;, &quot;no-cache&quot;);
response.setDateHeader(&quot;Expires&quot;, 0);
[/code]

<strong>PHP</strong>

[code lang="php"]
header('Cache-Control: no-cache, no-store, must-revalidate');
header('Pragma: no-cache');
header('Expires: 0');
[/code]

<strong>ASP</strong>

[code lang="vb"]
Response.addHeader &quot;Cache-Control&quot;, &quot;no-cache, no-store, must-revalidate&quot;
Response.addHeader &quot;Pragma&quot;, &quot;no-cache&quot;
Response.addHeader &quot;Expires&quot;, &quot;0&quot;
[/code]

<strong>ASP.NET</strong>

[code lang="vbnet"]
Response.AppendHeader(&quot;Cache-Control&quot;, &quot;no-cache, no-store, must-revalidate&quot;);
Response.AppendHeader(&quot;Pragma&quot;, &quot;no-cache&quot;);
Response.AppendHeader(&quot;Expires&quot;, &quot;0&quot;);
[/code]

<strong>Ruby on Rails</strong>

[code lang="ruby"]
response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
response.headers['Pragma'] = 'no-cache'
response.headers['Expires'] = '0'
[/code]

<strong>Python on Flask</strong>

[code lang="python"]
resp.headers[&quot;Cache-Control&quot;] = &quot;no-cache, no-store, must-revalidate&quot;
resp.headers[&quot;Pragma&quot;] = &quot;no-cache&quot;
resp.headers[&quot;Expires&quot;] = &quot;0&quot;
[/code]

<strong>Google Go</strong>

[code lang="bash"]
responseWriter.Header().Set(&quot;Cache-Control&quot;, &quot;no-cache, no-store, must-revalidate&quot;)
responseWriter.Header().Set(&quot;Pragma&quot;, &quot;no-cache&quot;)
responseWriter.Header().Set(&quot;Expires&quot;, &quot;0&quot;)
[/code]

<h2>Resources</h2>
<ul>
	<li><a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9">http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9</a></li>
	<li><a href="http://stackoverflow.com/a/2068407">http://stackoverflow.com/a/2068407</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>48</wp:post_id>
		<wp:post_date>2014-01-14 18:56:41</wp:post_date>
		<wp:post_date_gmt>2014-01-14 16:56:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>disable-browser-caching-with-meta-html-tags</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="browser"><![CDATA[browser]]></category>
		<category domain="post_tag" nicename="cache"><![CDATA[cache]]></category>
		<category domain="post_tag" nicename="html"><![CDATA[html]]></category>
		<category domain="category" nicename="html"><![CDATA[HTML]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Multiple properties files in Spring context XML</title>
		<link>http://cristian.sulea.net/blog/multiple-properties-files-in-spring-context-xml/</link>
		<pubDate>Wed, 05 Jun 2013 14:01:42 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=91</guid>
		<description></description>
		<content:encoded><![CDATA[Spring allows to externalize string literals in its context configuration files into external properties files, in order to separate application specific settings from framework specific configuration.

<h2>&lt;context:property-placeholder/&gt;</h2>

This element activates the replacement of ${...} placeholders, resolved against the specified properties file (as a Spring resource location).

[code lang="xml"]
&lt;context:property-placeholder
    location = &quot;classpath:dao.properties,
                classpath:services.properties,
                classpath:user.properties,
                /WEB-INF/config/config.properties&quot;
    ignore-unresolvable=&quot;true&quot;/&gt;
[/code]

<h2>PropertyPlaceholderConfigurer</h2>

A property resource configurer that resolves placeholders in bean property values of context definitions.

[code lang="xml"]
&lt;bean
    id=&quot;propertyConfigurer&quot;
    class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&gt;
 
    &lt;property name=&quot;locations&quot;&gt;
        &lt;list&gt;
            &lt;value&gt;classpath:dao.properties&lt;/value&gt;
            &lt;value&gt;classpath:services.properties&lt;/value&gt;
            &lt;value&gt;classpath:user.properties&lt;/value&gt;
            &lt;value&gt;/WEB-INF/config/config.properties&lt;/value&gt;
        &lt;/list&gt;
    &lt;/property&gt;
 
    &lt;property name=&quot;ignoreUnresolvablePlaceholders&quot; value=&quot;true&quot;/&gt;
&lt;/bean&gt;
[/code]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>91</wp:post_id>
		<wp:post_date>2013-06-05 17:01:42</wp:post_date>
		<wp:post_date_gmt>2013-06-05 14:01:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>multiple-properties-files-in-spring-context-xml</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="category" nicename="spring"><![CDATA[Spring]]></category>
		<category domain="post_tag" nicename="spring"><![CDATA[spring]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Code Review</title>
		<link>http://cristian.sulea.net/blog/code-review/</link>
		<pubDate>Sun, 02 Feb 2014 16:21:21 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=107</guid>
		<description></description>
		<content:encoded><![CDATA[Code review is a phase in the software development process in which other developers get together to review pieces of source code, with the intention of catching bugs and design errors before the code becomes part of the product.

Code reviews in most organizations are a painful experience for everyone involved. The developer often feels like it's a bashing session designed to beat out their will and the reviewers are often confused as to what is important to point out and what isn't.

<h2>The Purpose</h2>

Code reviews often start off on the wrong foot because they are perceived as an unnecessary step that has been forced upon the developers or, in some cases, evidence that management doesn't trust the developers. Neither of these perspectives is accurate. Code reviews are a proven, effective way to minimize defects. Whatever additional motivations the organization has for performing code reviews, they are, at their core, an industry best practice.

<h2>Catching bugs</h2>

The first purpose is to make sure that the code that is being produced has sufficient quality to be released. In other words, it's the acid test for whether the code should be promoted to the next step in the process.

<h2>Raising the bus factor</h2>

Knowledge is spread across your team. There are no longer large blocks of code that only one person knows about.
The <a href="http://en.wikipedia.org/wiki/Bus_factor">bus factor</a> is the total number of key developers who would need to be incapacitated to send the project into such disarray that it would not be able to proceed.

<h2>Ensuring readability</h2>

By getting someone else to provide feedback based on reading, rather than writing, the code you verify that the code is readable, and give an opportunity for someone with fresh eyes to suggest improvements.
Also the code becomes more maintainable.

<h2>Resources</h2>
<ul>
	<li><a href="http://alexgaynor.net/2013/sep/26/effective-code-review/">Effective Code Review</a></li>
	<li><a href="http://www.developer.com/tech/article.php/3579756/Effective-Code-Reviews-Without-the-Pain.htm">Effective Code Reviews Without the Pain</a></li>
	<li><a href="http://www.javacodegeeks.com/2012/02/code-reviews-in-21st-century.html">Code reviews in the 21st Century</a></li>
	<li><a href="http://www.google.com/search?q=code%20review&amp;btnI=lucky">Google (code+review)</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>107</wp:post_id>
		<wp:post_date>2014-02-02 18:21:21</wp:post_date>
		<wp:post_date_gmt>2014-02-02 16:21:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>code-review</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="code"><![CDATA[code]]></category>
		<category domain="post_tag" nicename="development"><![CDATA[development]]></category>
		<category domain="post_tag" nicename="review"><![CDATA[review]]></category>
		<category domain="post_tag" nicename="software"><![CDATA[software]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Software Development Roles</title>
		<link>http://cristian.sulea.net/blog/software-development-roles/</link>
		<pubDate>Mon, 03 Feb 2014 14:41:51 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=136</guid>
		<description></description>
		<content:encoded><![CDATA[Software development is done differently at every organization, and in every home office throughout the world. The process that one organization or person uses to develop software may work for their specific environment and situation, but may fail miserably in another set of circumstances.

However, despite these changes there are some things that remain the same. There will always be a need to understand the business problem, convert that problem into an architecture, convert the architecture into a solution, test the solution, and deploy the solution. Although each of these processes may change to some extent based on the programming models and tools being used, fundamentally there are some roles, which every process has in one form or another. One person may be filling all the roles or a handful of the roles, or one very specific role. Despite this there is a need for all of the roles - each serves a purpose. The organization chart below gives you an idea of how each position fits together within an organization.

<h2>Common Roles</h2>

There is a series of roles that exist in most software development processes. As mentioned above one team member may be filling many roles and some roles may be suppressed for a specific type of project but all of these roles exist in one form or another in every software development project:

<a href="http://cristian.sulea.net/blog/wp-content/uploads/software-development-roles.png"><img class="aligncenter" src="http://cristian.sulea.net/blog/wp-content/uploads/software-development-roles.png" alt="software development roles" width="981" height="287" /></a>

<strong>Subject Matter Experts (SMEs)</strong>

The subject matter expert is the person or persons from which requirements are captured. These are the people who know what the software needs to do and how the process works. The SME role is somewhat different from the other roles because it is constantly changing as new clients (internal or external) are brought in to help design a solution. SMEs are rarely from IT - except when the solution is being designed to support IT. SMEs are most frequently the person who will receive the benefit of the system.

<strong>Functional Analysts (FAs)</strong>

Functional analysts have the unenviable roles of eliciting clear, concise, non-conflicting requirements from the Subject Matter Experts who may or may not understand how technology can be used to transform the business processes in a positive way.

<strong>Solutions Architect (SA)</strong>

The technical architect is responsible for transforming the requirements created by the Functional Analysts into a set of architecture and design documents that can be used by the rest of the team to actually create the solution. The Solutions Architect is typically responsible for matching technologies to the problem being solved.

<strong>Development Lead (DL)</strong>

The development lead's role is focused around providing more detail to the Solution Architect's architecture. This would include detailed program specifications creation. The Development Lead is also the first line of support for the developers who need help understanding a concept or working through a particularly thorny issue.

<strong>Developer (Dev)</strong>

The heart and soul of the process, the developer actually writes the code that the Development Leads provided specifications for.

<strong>Quality Assurance (QA)</strong>

The quality assurance role is an often thankless position that is designed to find bugs before they find their way to the end customers. Using a variety of techniques ranging from keying in data and playing with the system to formalized, automated testing scripts the Quality Assurance team is responsible for ensuring the quality of the solution and it's fit to the requirements gathered by the Functional Analyst. Sometimes the QA team is known by their less flattering name of testers.

<strong>Deployment (Deploy)</strong>

The deployment role is the one which packages up all of the compiled code and configuration files and deploys it through the appropriate environments or on the appropriate systems. The deployment role is focused on getting the solution used. To that end the role may include automated software installation procedures or may be as simple as copying the files to the appropriate place and running them.

<strong>Training</strong>

The training role is responsible for documentation for the system as well as any instructor or computer based training solutions, which are designed to help the users better understand how the system works and what they can do with it.

<strong>Project Manager (PM)</strong>

The project manager is responsible for ensuring consistent reporting, risk mitigation, timeline, and cost control. The project manager role is a problem solver role. They try to resolve problems why they are small so that they can be handled more quickly and with less cost.

<strong>Development Manager (DM)</strong>

The development manager is responsible for managing multiple priorities of conflicting projects. The Development Manager role is also an escalation for issues from the team, which it is unable to resolve internally.

<h2>Critical Skills for Every Role</h2>

A set of skills was identified to be essential business skills that professionals in nearly every role needed to consider during their career.

<strong>Understanding Business</strong>

Although some roles are focused very specifically around certain aspects of understanding and converting business requirements, every role in the process should have an awareness and sensitivity to the business processes and needs which require technology in the first place. Without this technology may be implemented but it may not solve the real needs and will therefore be considered a failure.

<strong>Broad Understanding</strong>

Although an understanding of software development is critical there are other areas where an understanding can be invaluable. For instance, understanding how computers work internally including memory, cache, hard drives, etc., can help you learn how to more appropriately conserve those resources. Similarly understanding networking can help in the development of applications, which are compatible or even friendly to the networks that they're working across. SMEs broad understanding of the industry can be invaluable in terms of creating solutions that fit both the organization and the industry. The QA team can benefit the project by a broad understanding by minimizing QA costs while improving testing coverage. In short, a broad understanding can help every role.

<strong>Multiple Perspectives</strong>

The ability to approach solutions from multiple perspectives is critical to software development. Understanding how each person who is working on a problem views an issue - or how different customers will view the solution is important to be able to find the best solution based on all of the information. There are always multiple ways of viewing - and solving - a problem. The trick is to find the best one from the list of possible options. The larger the list of options (perspectives) the better the solution.

<strong>People Skills</strong>

Also known as soft skills, the ability to interact with other people and to be a part of a team is essential to nearly every role in a software development project. The lower the overall people skills of the team the higher the likelihood that the project will end in some explosion.

<h2>Resources</h2>
<ul>
	<li>a PDF file named "Developer eBook" and downloaded from <a href="http://www.internet.com">Internet.com</a> (deleted in the meantime)</li>
	<li>it seems that the source for that "Developer eBook" is an older article from <a href="http://www.developer.com/mgmt/article.php/3490871/Cracking-the-Code-Breaking-Down-the-Software-Development-Roles.htm">Developer.com</a> web site, and the author is <a href="mailto:Robert.Bogue@CroweChizek.com">Robert Bogue</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>136</wp:post_id>
		<wp:post_date>2014-02-03 16:41:51</wp:post_date>
		<wp:post_date_gmt>2014-02-03 14:41:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>software-development-roles</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[development]]></category>
		<category domain="post_tag" nicename="software"><![CDATA[software]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Linux - Set up HTTP proxy for APT (apt-get)</title>
		<link>http://cristian.sulea.net/blog/linux-set-up-http-proxy-for-apt-apt-get/</link>
		<pubDate>Mon, 03 Mar 2014 15:38:59 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=160</guid>
		<description></description>
		<content:encoded><![CDATA[Open <code>apt.conf</code> file with preferred editor:

[code]
nano /etc/apt/apt.conf
[/code]

And add a new line with the proxy settings (or update if the line is already present) :

[code]
Acquire::http::Proxy &quot;http://user:password@server:port/&quot;;
[/code]

<h2>Protect the proxy settings by removing READ permissions for "all other users"</h2>

[code]
stat /etc/apt/apt.conf
chmod 640 /etc/apt/apt.conf
[/code]

<h2>Resources</h2>
<ul>
	<li><a href="https://wiki.debian.org/AptConf">https://wiki.debian.org/AptConf</a></li>
	<li><a href="https://help.ubuntu.com/community/AptGet/Howto">https://help.ubuntu.com/community/AptGet/Howto</a></li>
	<li><a href="http://www.unixmen.com/configure-debian-squeeze-to-work-behind-a-proxy-faqs/">http://www.unixmen.com/configure-debian-squeeze-to-work-behind-a-proxy-faqs/</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>160</wp:post_id>
		<wp:post_date>2014-03-03 17:38:59</wp:post_date>
		<wp:post_date_gmt>2014-03-03 15:38:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>linux-set-up-http-proxy-for-apt-apt-get</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apt"><![CDATA[apt]]></category>
		<category domain="post_tag" nicename="apt-get"><![CDATA[apt-get]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="proxy"><![CDATA[proxy]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_a16bc9f64249f1dda7a9e84c6a96b285</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_b090a98de1428b861e9e865ca085b37e</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_98b18c4279f512b3dbfe5dd377490ac9</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_76ed7a22c872d1a0a90a3e47ac9dd8ad</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Linux - Set up HTTP proxy for Wget (wget)</title>
		<link>http://cristian.sulea.net/blog/linux-set-up-http-proxy-for-wget-wget/</link>
		<pubDate>Tue, 04 Mar 2014 15:39:00 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=161</guid>
		<description></description>
		<content:encoded><![CDATA[Open <code>wgetrc</code> file with preferred editor:

[code]
nano /etc/wgetrc
[/code]

And add a new line with the proxy settings (or update if the line is already present) :

[code]
http_proxy = http://user:password@server:port/
[/code]

<h2>Protect the proxy settings by removing READ permissions for "all other users"</h2>

[code]
stat /etc/wgetrc
chmod 640 /etc/wgetrc
[/code]

<h2>Resources</h2>
<ul>
	<li><a href="http://linuxers.org/tutorial/wget-proxy-how-run-wget-behind-proxy-server">http://linuxers.org/tutorial/wget-proxy-how-run-wget-behind-proxy-server</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>161</wp:post_id>
		<wp:post_date>2014-03-04 17:39:00</wp:post_date>
		<wp:post_date_gmt>2014-03-04 15:39:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>linux-set-up-http-proxy-for-wget-wget</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="proxy"><![CDATA[proxy]]></category>
		<category domain="post_tag" nicename="wget"><![CDATA[wget]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Install bash-completion</title>
		<link>http://cristian.sulea.net/blog/install-bash-completion-on-linux-debian/</link>
		<pubDate>Wed, 05 Mar 2014 15:42:45 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=198</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>programmable completion (autocomplete) for the bash shell</strong>

<strong>bash-completion</strong> extends bash's standard completion behavior to achieve complex command lines with just a few keystrokes. This project was conceived to produce programmable completion routines for the most common Linux/UNIX commands, reducing the amount of typing sysadmins and programmers need to do on a daily basis.

[code title="Ubuntu / Debian"]
apt-get install bash-completion
[/code]

[code title="Fedora"]
yum install bash-completion
[/code]

<h2>Resources</h2>
<ul>
	<li><a href="http://packages.debian.org/wheezy/bash-completion">http://packages.debian.org/wheezy/bash-completion</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>198</wp:post_id>
		<wp:post_date>2014-03-05 17:42:45</wp:post_date>
		<wp:post_date_gmt>2014-03-05 15:42:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>install-bash-completion-on-linux-debian</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bash"><![CDATA[bash]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_7467644bc8d7a314e4bdfde826abcf7f</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Linux - Mount a CD-ROM or DVD</title>
		<link>http://cristian.sulea.net/blog/linux-mount-cd-rom-or-dvd/</link>
		<pubDate>Mon, 14 Apr 2014 16:52:28 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=218</guid>
		<description></description>
		<content:encoded><![CDATA[Common CD mount points are <code>/cdrom</code> and <code>/mnt/cdrom</code> and common DVD mount points are <code>/dvdrom</code> and <code>/mnt/dvdrom</code>.

If the mount point does not exist, create it:

[code]
mkdir /mnt/cdrom
[/code]

Mount it:

[code]
mount -t iso9660 -o ro /dev/cdrom /mnt/cdrom
[/code]

If you cannot mount because
<blockquote>the device is already mounted or directory busy</blockquote>
perhaps the mount point <code>/mnt/cdrom</code> is your current directory. You have to change the directory to somewhere else in order to be able to mount to it.

<h2>Unmount and eject</h2>

Exit the directory <code>/mnt/cdrom</code> and execute:

[code]
umount /mnt/cdrom
eject
[/code]

Or simply run:

[code]
eject
[/code]

If you are unable to unmount your previously mounted CD-ROM, make sure that you are not in the directory where your CD-ROM is mounted or that some other application is not using it.

If you are still having problems to unmount your CD-ROM medium you can use <code>fuser</code> command to kill all related processes using your device.

[code]
fuser -mk /dev/hdc
eject
[/code]

Never use the above command on devices mounted read/write unless you are sure what you are doing.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>218</wp:post_id>
		<wp:post_date>2014-04-14 19:52:28</wp:post_date>
		<wp:post_date_gmt>2014-04-14 16:52:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>linux-mount-cd-rom-or-dvd</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[linux-mount-a-cd-rom-or-dvd]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Install Google Chrome on Linux Ubuntu</title>
		<link>http://cristian.sulea.net/blog/install-google-chrome-on-linux-ubuntu/</link>
		<pubDate>Sat, 24 May 2014 17:08:59 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=231</guid>
		<description></description>
		<content:encoded><![CDATA[Best way to install is to add the Google Chrome PPA to repository and to install using the <a href="http://manpages.debian.org/cgi-bin/man.cgi?query=apt-get">apt-get</a> command.

<h2>1. Enable Google Apt-Get repository</h2>

Add Linux repository public key from Google:

[code]
wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
[/code]

When added, run the command below:

[code]
sudo gedit /etc/apt/sources.list.d/google.list
[/code]

Then copy and paste the line below into the file and save:

[code]
deb http://dl.google.com/linux/chrome/deb/ stable main
[/code]

After saving the file, run the commands below to update your system:

[code]
sudo apt-get update
[/code]

Or:

[code]
sudo sh -c 'echo &quot;deb http://dl.google.com/linux/chrome/deb/ stable main&quot; &gt;&gt; /etc/apt/sources.list.d/google.list'
[/code]

<h2>2. Install Google Chrome with Apt-Get</h2>

Install Google Chrome Stable Version:

[code]
sudo apt-get install google-chrome-stable
[/code]

Install Google Chrome Beta Version:

[code]
sudo apt-get install google-chrome-beta
[/code]

Install Google Chrome Unstable Version:

[code]
sudo apt-get install google-chrome-unstable
[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>231</wp:post_id>
		<wp:post_date>2014-05-24 20:08:59</wp:post_date>
		<wp:post_date_gmt>2014-05-24 17:08:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>install-google-chrome-on-linux-ubuntu</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="chrome"><![CDATA[chrome]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="ubuntu"><![CDATA[ubuntu]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hibernate - Entity Superclass (@MappedSuperclass)</title>
		<link>http://cristian.sulea.net/blog/hibernate-entity-superclass-mappedsuperclass/</link>
		<pubDate>Thu, 26 Jun 2014 14:06:10 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=246</guid>
		<description></description>
		<content:encoded><![CDATA[The solution to code repetition (like for example wiring an </em><code>id</code>, <code>version</code> and/or <code>timestamp</code> fields in every Hibernate entity) is to inherit these properties from a superclass. This can be done using the <a href="http://docs.oracle.com/javaee/7/api/javax/persistence/MappedSuperclass.html">@MappedSuperclass</a> annotation. A mapped superclass designates a class whose mapping information is applied to the entities that inherit from it.

Notes:
<ul>
	<li>a mapped superclass has no separate table defined for it;</li>
	<li>mapping information may be overridden in such subclasses by using the <a href="http://docs.oracle.com/javaee/7/api/javax/persistence/AttributeOverride.html">@AttributeOverride</a> and <a href="http://docs.oracle.com/javaee/7/api/javax/persistence/AssociationOverride.html">@AssociationOverride</a> annotations or corresponding XML elements.</li>
</ul>

<h2>Example: Concrete class as a mapped superclass</h2>

[code lang="java" title="AbstractEntity.java"]

@MappedSuperclass
public abstract class AbstractEntity {

  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  @Column(name = &quot;ID&quot;, updatable = false, nullable = false)
  private Long id;

  @Temporal(TemporalType.TIMESTAMP)
  @Column(name = &quot;LAST_UPDATE_TIMESTAMP&quot;, nullable = false)
  private Date lastUpdateTimestamp;

  @Version
  @Column(name = &quot;VERSION&quot;, nullable = false)
  private int version = 0;

  @Override
  public String toString() {
    return String.valueOf(id);
  }

  @PreUpdate
  protected void onPreUpdate() {
    lastUpdateTimestamp = new Date();
  }

  public Long getId() {
    return id;
  }

  public Date getLastUpdateTimestamp() {
    return lastUpdateTimestamp;
  }

  public int getVersion() {
    return version;
  }
}
[/code]


[code lang="java" title="Email.java"]

@Entity
@Table(name = &quot;EMAIL&quot;)
public class Email extends AbstractEntity {

  @Column(name = &quot;ADDRESS&quot;, nullable = false)
  private String address;

  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }
}
[/code]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>246</wp:post_id>
		<wp:post_date>2014-06-26 17:06:10</wp:post_date>
		<wp:post_date_gmt>2014-06-26 14:06:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hibernate-entity-superclass-mappedsuperclass</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="hibernate"><![CDATA[Hibernate]]></category>
		<category domain="post_tag" nicename="hibernate"><![CDATA[hibernate]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hibernate - One To Many (Annotation)</title>
		<link>http://cristian.sulea.net/blog/hibernate-one-to-many-annotation/</link>
		<pubDate>Fri, 27 Jun 2014 14:07:12 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=247</guid>
		<description></description>
		<content:encoded><![CDATA[One-to-many associations are declared at the property level with the annotation <a href="http://docs.oracle.com/javaee/7/api/javax/persistence/OneToMany.html">@OneToMany</a>.

<h2>Bidirectional</h2>

[code lang="java" highlight="5-9,20"]

@Entity
@Table(name = &quot;CONTACT&quot;)
public class Contact {

  @OneToMany(
    mappedBy = &quot;contact&quot;,
    cascade = CascadeType.ALL,
    orphanRemoval = true,
    fetch = FetchType.EAGER)
  @Fetch(FetchMode.SELECT)
  private Set&lt;Address&gt; addresses = new LinkedHashSet&lt;Address&gt;();

  ...
}

@Entity
@Table(name = &quot;ADDRESS&quot;)
public class Address {

  @ManyToOne(fetch = FetchType.EAGER)
  @JoinColumn(name = &quot;CONTACT_ID&quot;, nullable = false)
  private Contact contact;

  ...
}
[/code]

<h2>Unidirectional</h2>

A unidirectional one to many using a foreign key column (using <a href="http://docs.oracle.com/javaee/7/api/javax/persistence/JoinColumn.html">@JoinColumn</a>) in the owned entity is not that common and not really recommended. You are strongly advised to use a join table for this kind of association.

[code lang="java" highlight="9"]

@Entity
@Table(name = &quot;CONTACT&quot;)
public class Contact {

  @OneToMany(
    cascade = CascadeType.ALL,
    orphanRemoval = true,
    fetch = FetchType.EAGER)
  @JoinColumn(name=&quot;CONTACT_ID&quot;)
  @Fetch(FetchMode.SELECT)
  private Set&lt;Address&gt; addresses = new LinkedHashSet&lt;Address&gt;();
  
  ...
}

@Entity
@Table(name = &quot;ADDRESS&quot;)
public class Address {

  ... // no bidirectional
}
[/code]

<h2>Unidirectional with join table</h2>

A unidirectional one to many with join table is much preferred. This association is described through <a href="http://docs.oracle.com/javaee/7/api/javax/persistence/JoinTable.html">@JoinTable</a>.

[code lang="java" highlight="9-12"]

@Entity
@Table(name = &quot;CONTACT&quot;)
public class Contact {

  @OneToMany(
    cascade = CascadeType.ALL,
    orphanRemoval = true,
    fetch = FetchType.EAGER)
  @JoinTable(
    name=&quot;Address&quot;,
    joinColumns = @JoinColumn( name = &quot;CONTACT_ID&quot;),
    inverseJoinColumns = @JoinColumn( name = &quot;ADDRESS_ID&quot;))
  private Set&lt;Address&gt; addresses = new LinkedHashSet&lt;Address&gt;();

  ...
}

@Entity
@Table(name = &quot;ADDRESS&quot;)
public class Address {

  ... // no bidirectional
}
[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>247</wp:post_id>
		<wp:post_date>2014-06-27 17:07:12</wp:post_date>
		<wp:post_date_gmt>2014-06-27 14:07:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hibernate-one-to-many-annotation</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="hibernate"><![CDATA[Hibernate]]></category>
		<category domain="post_tag" nicename="hibernate"><![CDATA[hibernate]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>HibernateException - A collection with cascade=&quot;all-delete-orphan&quot; was no longer referenced by the owning entity instance</title>
		<link>http://cristian.sulea.net/blog/hibernate-exception-a-collection-with-cascade-all-delete-orphan-was-no-longer-referenced-by-the-owning-entity-instance/</link>
		<pubDate>Sat, 28 Jun 2014 14:08:13 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=248</guid>
		<description></description>
		<content:encoded><![CDATA[What is happening is that <a href="http://hibernate.org">Hibernate</a> requires complete ownership of the children collection in the Parent object. If you set it to a new object, Hibernate is unable to track changes to that collection and thus has no idea how to apply the cascading persistence to your objects.

So the code like:

[code lang="java"]
this.children = someNewSetOfChildren;
[/code]

or like:

[code lang="java"]
parent.setChildren(someNewSetOfChildren);
[/code]

results in a <a href="https://docs.jboss.org/hibernate/orm/4.3/javadocs/org/hibernate/HibernateException.html">HibernateException</a> with the message:

<blockquote>A collection with cascade="all-delete-orphan" was no longer referenced by the owning entity instance</blockquote>

The full stack trace of the exception is:

[code lang="java" highlight="2"]
org.hibernate.HibernateException:
A collection with cascade=&quot;all-delete-orphan&quot; was no longer referenced by the owning entity instance: entities.Parent.childs
    at org.hibernate.engine.internal.Collections.processDereferencedCollection(Collections.java:116)
    at org.hibernate.engine.internal.Collections.processUnreachableCollection(Collections.java:67)
    at org.hibernate.event.internal.AbstractFlushingEventListener.flushCollections(AbstractFlushingEventListener.java:245)
    at org.hibernate.event.internal.AbstractFlushingEventListener.flushEverythingToExecutions(AbstractFlushingEventListener.java:100)
    at org.hibernate.event.internal.DefaultAutoFlushEventListener.onAutoFlush(DefaultAutoFlushEventListener.java:55)
    at org.hibernate.internal.SessionImpl.autoFlushIfRequired(SessionImpl.java:1099)
    at org.hibernate.internal.SessionImpl.list(SessionImpl.java:1528)
    at org.hibernate.internal.CriteriaImpl.list(CriteriaImpl.java:374)
    at org.hibernate.internal.CriteriaImpl.uniqueResult(CriteriaImpl.java:396)
    ...
[/code]

To avoid this problem, any time we want to add or delete something to the list, we have to modify the contents of the collection instead of assigning a new one with code like:

[code lang="java"]
parent.getChildren().clear();
parent.getChildren().addAll(someNewSetOfChildren);
[/code]

or like:

[code lang="java"]
public void setChildren(Set&lt;Child&gt; someNewSetOfChildren) {
 
    //
    // This will override the set that Hibernate is tracking.
    // this.children = someNewSetOfChildren;
 
    this.children.clear();
    this.children.addAll(someNewSetOfChildren);
}
[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>248</wp:post_id>
		<wp:post_date>2014-06-28 17:08:13</wp:post_date>
		<wp:post_date_gmt>2014-06-28 14:08:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hibernate-exception-a-collection-with-cascade-all-delete-orphan-was-no-longer-referenced-by-the-owning-entity-instance</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="hibernate"><![CDATA[Hibernate]]></category>
		<category domain="post_tag" nicename="hibernate"><![CDATA[hibernate]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>428</wp:comment_id>
			<wp:comment_author><![CDATA[boom beach diamonds unlimited,]]></wp:comment_author>
			<wp:comment_author_email>bertie.lechuga@yahoo.de</wp:comment_author_email>
			<wp:comment_author_url>http://getgamesforfree.com/</wp:comment_author_url>
			<wp:comment_author_IP>89.35.105.188</wp:comment_author_IP>
			<wp:comment_date>2015-12-17 21:14:21</wp:comment_date>
			<wp:comment_date_gmt>2015-12-17 19:14:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Download the method iFunBox or a single of its clones and stick to the 
recommendations in the video clip.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1450379661.581787109375;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>357</wp:comment_id>
			<wp:comment_author><![CDATA[[SOLVED] HibernateException – A collection with cascade=”all-delete-orphan” was no longer referenced by the owning entity instance | Lessons 4 Devs]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>https://vvirlan.wordpress.com/2015/11/26/solved-hibernateexception-a-collection-with-cascadeall-delete-orphan-was-no-longer-referenced-by-the-owning-entity-instance/</wp:comment_author_url>
			<wp:comment_author_IP>192.0.101.249</wp:comment_author_IP>
			<wp:comment_date>2015-11-26 10:45:14</wp:comment_date>
			<wp:comment_date_gmt>2015-11-26 08:45:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] HibernateException – A collection with cascade=”all-delete-orphan” was no longer referenced by&#8230; [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1448527514.4304130077362060546875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Install Google Chrome on Linux Fedora</title>
		<link>http://cristian.sulea.net/blog/install-google-chrome-on-linux-fedora/</link>
		<pubDate>Sun, 25 May 2014 13:41:21 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=265</guid>
		<description></description>
		<content:encoded><![CDATA[Best way to install and keep up-to-date with Google Chrome browser is use Google’s own YUM repository.

<h2>1. Enable Google YUM repository</h2>

Add following to <code>/etc/yum.repos.d/google.repo</code> file:

[code title="32-bit systems"]
[google-chrome]
name=google-chrome - 32-bit
baseurl=http://dl.google.com/linux/chrome/rpm/stable/i386
enabled=1
gpgcheck=1
gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub
[/code]

[code title="64-bit systems"]
[google-chrome]
name=google-chrome - 64-bit
baseurl=http://dl.google.com/linux/chrome/rpm/stable/x86_64
enabled=1
gpgcheck=1
gpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub
[/code]

<h2>2. Install Google Chrome with YUM</h2>

Install Google Chrome stable version:

[code]
yum install google-chrome-stable
[/code]

Install Google Chrome beta version:

[code]
yum install google-chrome-beta
[/code]

Install Google Chrome unstable version:

[code]
yum install google-chrome-unstable
[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>265</wp:post_id>
		<wp:post_date>2014-05-25 16:41:21</wp:post_date>
		<wp:post_date_gmt>2014-05-25 13:41:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>install-google-chrome-on-linux-fedora</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="chrome"><![CDATA[chrome]]></category>
		<category domain="post_tag" nicename="fedora"><![CDATA[fedora]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mount VirtualBox shared folders on Linux</title>
		<link>http://cristian.sulea.net/blog/mount-virtualbox-shared-folders-on-linux/</link>
		<pubDate>Tue, 15 Apr 2014 14:08:12 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=269</guid>
		<description></description>
		<content:encoded><![CDATA[Define a shared folder:

[code]
Temp
[/code]

Create a folder where the shared folder will be mounted:

[code]
mkdir ~/Temp
[/code]

Mount it:

[code]
mount -t vboxsf Temp ~/Temp
[/code]

If you want to have it mount automatically upon each boot, put the mount command in <code>/etc/rc.local</code> (Debian based distro's), or whatever script is run at the end of the boot process. When you put the mount command in <code>/etc/rc.local</code>, so it's mounted at startup, you can't use the short notation for your home folder.

During startup, everything is done through the root user, so using <code>~</code> for home, means it's the home folder of Root (<code>/root</code>). Change it to the full path. For example:

[code]
mount -t vboxsf Temp /home/&lt;username&gt;/Temp
[/code]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>269</wp:post_id>
		<wp:post_date>2014-04-15 17:08:12</wp:post_date>
		<wp:post_date_gmt>2014-04-15 14:08:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mount-virtualbox-shared-folders-on-linux</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Install Java Oracle on Linux Ubuntu</title>
		<link>http://cristian.sulea.net/blog/install-java-oracle-on-linux-ubuntu/</link>
		<pubDate>Thu, 10 Jul 2014 14:36:15 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=276</guid>
		<description></description>
		<content:encoded><![CDATA[Add partner repository:

[code]
sudo apt-get purge openjdk*
[/code]

Update the source list:

[code]
sudo add-apt-repository &quot;deb http://archive.canonical.com/ lucid partner&quot;
sudo apt-get update
sudo apt-get install sun-java6-jre sun-java6-plugin
[/code]

Install Sun's Java packages:

[code]
sudo update-alternatives –config java
[/code]

Confirm that your system is configured properly for Sun’s JRE (by checking the java version):

[code]
java -version
[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>276</wp:post_id>
		<wp:post_date>2014-07-10 17:36:15</wp:post_date>
		<wp:post_date_gmt>2014-07-10 14:36:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>install-java-oracle-on-linux-ubuntu</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="ubuntu"><![CDATA[ubuntu]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Install Java (OpenJDK) 7 on Linux Debian</title>
		<link>http://cristian.sulea.net/blog/install-java-openjdk-7-on-linux-debian/</link>
		<pubDate>Fri, 11 Jul 2014 14:43:37 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=278</guid>
		<description></description>
		<content:encoded><![CDATA[[code]
apt-get install openjdk-7-jdk
[/code]

<h2>Resources</h2>

<ul>
	<li><a href="http://packages.debian.org/wheezy/openjdk-7-jdk">http://packages.debian.org/wheezy/openjdk-7-jdk</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>278</wp:post_id>
		<wp:post_date>2014-07-11 17:43:37</wp:post_date>
		<wp:post_date_gmt>2014-07-11 14:43:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>install-java-openjdk-7-on-linux-debian</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debian"><![CDATA[debian]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_6dad8e34e8853e309afc0513c8f94850</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Root Samsung Galaxy S2 on Android 4.0.4</title>
		<link>http://cristian.sulea.net/blog/root-samsung-galaxy-s2-on-android-4-0-4/</link>
		<pubDate>Sat, 06 Jul 2013 14:32:00 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=510</guid>
		<description></description>
		<content:encoded><![CDATA[The instructions in this guide are for rooting the <strong>Samsung Galaxy S2 GT-I9100</strong> on <strong>Android 4.0.4</strong> build <strong>XXLQ5</strong>.

<h2>Requirements</h2>

<ul>
	<li>Handset USB drivers ( you may install the drivers by installing <a href="http://www.samsung.com/us/kies/">Samsung Kies</a> ).</li>
	<li>USB Debugging must be enabled.</li>
	<li>Samsung Kies and other software that accesses your phone must be disabled (such software can interfere with the procedure; use Windows Task Manager to be sure nothing is running in the background).</li>
	<li>CF-Root Kernel ( <a href="http://download.chainfire.eu/202/CF-Root/SGS2/CF-Root-SGS2_XX_OXA_LQ5-v5.6-CWM5.zip">CF-Root-SGS2_XX_OXA_LQ5-v5.6-CWM5.zip</a>, 6.5 MB ).</li>
	<li>Odin3 1.85 ( <a href="http://www.mediafire.com/?ie9p39s13neawxe">Odin 1.85.zip</a>, 199 kB ).</li>
	<li>Battery is charged up to 75% or more (to avoid interruptions during the process).</li>
</ul>

<h2>Instructions</h2>

<ol>
	<li>Extract the contents of the <code>CF-Root-SGS2_XX_OXA_LQ5-v5.6-CWM5.zip</code> file to get the file:
	<ul>
		<li><code>CF-Root-SGS2_XX_OXA_LQ5-v5.5-CWM5.tar</code></li>
	</ul>
	</li>
	<li>Unplug the phone from the computer if it is connected.</li>
	<li>Turn off the your phone.</li>
	<li>Put the phone into Download Mode (hold the Volume Down, Home and Power buttons together until the screen turns on).</li>
	<li>Start Odin.</li>
	<li>Connect the phone to the PC using the USB cable (in Odin, a message saying "Added!!" will appear on the bottom left of the window).</li>
	<li>Click on the PDA button and select the file:
	<ul>
		<li><code>CF-Root-SGS2_XX_OXA_LQ5-v5.5-CWM5.tar</code></li>
	</ul>
	</li>
	<li>Click on the Start button in Odin to start flashing the firmware to your phone.</li>
	<li>After the flashing completes, your phone will automatically reboot. You should be able to get a "PASS" message on the top left part of Odin (if you get a FAIL message or Odin gets stuck, disconnect your phone from the PC and close Odin, remove the battery from your phone, re-insert it, and do the procedure again).</li>
	<li>Once you see the Samsung logo on your phone’s screen, you can safely disconnect your phone from the PC.</li>
</ol>

<h2>Resources</h2>
<ul>
	<li><a href="http://forum.xda-developers.com/showthread.php?t=1103399">XDA Developers Android and Mobile Development Forum</a></li>
	<li><a href="http://www.androidauthority.com/galaxy-s2-gt-i9100-root-android-4-0-4-ics-xxlq5-102577/">Android Authority</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>510</wp:post_id>
		<wp:post_date>2013-07-06 17:32:00</wp:post_date>
		<wp:post_date_gmt>2013-07-06 14:32:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>root-samsung-galaxy-s2-on-android-4-0-4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[android]]></category>
		<category domain="category" nicename="android"><![CDATA[Android]]></category>
		<category domain="post_tag" nicename="galaxy"><![CDATA[galaxy]]></category>
		<category domain="post_tag" nicename="samsung"><![CDATA[samsung]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Upgrade Samsung Galaxy S2 to Android 4.0.4</title>
		<link>http://cristian.sulea.net/blog/upgrade-samsung-galaxy-s2-to-android-4-0-4/</link>
		<pubDate>Tue, 06 Aug 2013 14:32:02 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=511</guid>
		<description></description>
		<content:encoded><![CDATA[The instructions in this guide are for upgrading the <strong>Samsung Galaxy S2 GT-I9100</strong> to <strong>Android 4.0.4</strong> build <strong>XXLQ5</strong>.

<h2>Requirements</h2>

<ul>
	<li>Handset USB drivers ( you may install the drivers by installing <a href="http://www.samsung.com/us/kies/">Samsung Kies</a> ).</li>
	<li>USB Debugging must be enabled.</li>
	<li>Samsung Kies and other software that accesses your phone must be disabled (such software can interfere with the procedure; use Windows Task Manager to be sure nothing is running in the background).</li>
	<li>Android 4.0.4 ICS firmware build XXLQ5 ( <a href="http://hotfile.com/dl/162208594/226b6f0/I9100XXLQ5_I9100OXALQ5_OXA.zip.html">I9100XXLQ5_I9100OXALQ5_OXA.zip</a>, 387.1 MB ).</li>
	<li>Odin3 1.85 ( <a href="http://www.mediafire.com/?ie9p39s13neawxe">Odin 1.85.zip</a>, 199 kB ).</li>
	<li>Battery is charged up to 75% or more (to avoid interruptions during the process).</li>
</ul>

<h2>Instructions</h2>

<ol>
	<li>Extract the contents of the <code>I9100XXLQ5_I9100OXALQ5_OXA.zip</code> file to get these files:
	<ul>
		<li><code>I9100_CODE_I9100XXLQ5_CL753921_REV02_user_low_ship.tar.md5</code></li>
		<li><code>GT-I9100-MULTI-CSC-OXALQ5.tar.md5</code></li>
		<li><code>MODEM_I9100XXLQ5_REV_02_CL1165929.tar.md5</code></li>
		<li><code>u1_02_20120326_emmc_EXT4_8GB.pit</code></li>
	</ul>
	</li>
	<li>Unplug the phone from the computer if it is connected.</li>
	<li>Turn off the your phone.</li>
	<li>Put the phone into Download Mode (hold the Volume Down, Home and Power buttons together until the screen turns on).</li>
	<li>Start Odin.</li>
	<li>Connect the phone to the PC using the USB cable (in Odin, a message saying "Added!!" will appear on the bottom left of the window).</li>
	<li>Click on the PDA button and select the file:
	<ul>
		<li><code>I9100_CODE_I9100XXLQ5_CL753921_REV02_user_low_ship.tar.md5</code></li>
	</ul>
	</li>
	<li>Click on the PHONE button and select the file:
	<ul>
		<li><code>MODEM_I9100XXLQ5_REV_02_CL1165929.tar.md5</code></li>
	</ul>
	</li>
	<li>Click on the CSC button and select the file:
	<ul>
		<li><code>GT-I9100-MULTI-CSC-OXALQ5.tar.md5</code></li>
	</ul>
	</li>
	<li>Click on the Start button in Odin to start flashing the firmware to your phone.</li>
	<li>After the flashing completes, your phone will automatically reboot. You should be able to get a “PASS” message on the top left part of Odin (if you get a FAIL message or Odin gets stuck, disconnect your phone from the PC and close Odin, remove the battery from your phone, re-insert it, and do the procedure again).</li>
	<li>Once you see the Samsung logo on your phone’s screen, you can safely disconnect your phone from the PC.</li>
</ol>

<h2>Resources</h2>
<ul>
	<li><a href="http://www.sammobile.com/firmware/?page=8&amp;view=5235">SamMobile Firmware Page</a></li>
	<li><a href="http://www.androidauthority.com/galaxy-s2-gt-i9100-android-4-0-4-ics-xxlq5-update-102125/">Android Authority</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>511</wp:post_id>
		<wp:post_date>2013-08-06 17:32:02</wp:post_date>
		<wp:post_date_gmt>2013-08-06 14:32:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>upgrade-samsung-galaxy-s2-to-android-4-0-4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[android]]></category>
		<category domain="category" nicename="android"><![CDATA[Android]]></category>
		<category domain="post_tag" nicename="galaxy"><![CDATA[galaxy]]></category>
		<category domain="post_tag" nicename="samsung"><![CDATA[samsung]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Total Commander - Multi rename, remove last characters</title>
		<link>http://cristian.sulea.net/blog/?p=633</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=633</guid>
		<description></description>
		<content:encoded><![CDATA[http://www.ghisler.ch/board/viewtopic.php?t=4925
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>633</wp:post_id>
		<wp:post_date>2015-11-20 10:21:42</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_dc01b941533db4fdac2da7d66976e6db</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Gmail advanced search operators</title>
		<link>http://cristian.sulea.net/blog/gmail-advanced-search-operators/</link>
		<pubDate>Fri, 29 May 2015 11:10:05 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=110</guid>
		<description></description>
		<content:encoded><![CDATA[Advanced search operators are query words or symbols that perform special actions in Gmail search. These operators allow you to find what you're looking for quickly and accurately. They can also be used to <a href="http://support.google.com/mail/bin/answer.py?answer=6579">set up filters</a> so you can organize your inbox automatically.

Some of the most useful operators are listed below.

<strong>from:</strong>
Used to specify the sender.
Example: <code>from:amy</code>
Meaning: Messages from Amy.

<strong>to:</strong>
Used to specify a recipient.
Example: <code>to:david</code>
Meaning: All messages that were sent to David (by you or someone else).

<strong>subject:</strong>
Search for words in the subject line.
Example: <code>subject:dinner</code>
Meaning: Messages that have the word "dinner" in the subject.

<strong>OR</strong>
Search for messages matching term A or term B.
Note: OR must be in all caps
Example: <code>from:amy OR from:david</code>
Meaning: Messages from Amy or from David.

<strong>label:</strong>
Search for messages by label.
Example: <code>from:amy label:friends</code>
Meaning: Messages from Amy that have the label "friends".
Example: <code>from:david label:my-family</code>
Meaning: Messages from David that have the label "My Family".

<strong>-
(hyphen)</strong>
Used to exclude messages from your search.
Example: <code>dinner -movie</code>
Meaning: Messages that contain the word "dinner" but do not contain the word "movie".

<strong>" "
(quotes)</strong>
Used to search for an exact phrase.
Capitalization isn't taken into consideration.
Example: <code>"i'm feeling lucky"</code>
Meaning: Messages containing the phrase "i'm feeling lucky" or "I'm feeling lucky".
Example: <code>subject:"dinner and a movie"</code>
Meaning: Messages containing the phrase "dinner and a movie" in the subject.

The full list can be found on the <a href="https://support.google.com/mail">Gmail Help Center</a>:
<ul>
	<li><a href="https://support.google.com/mail/answer/7190">https://support.google.com/mail/answer/7190</a></li>
</ul>

<h2>Resources</h2>
<ul>
	<li><a href="https://support.google.com/mail/answer/7190">Gmail Help / Advanced search</a></li>
	<li><a href="https://support.google.com/mail/answer/6579">Gmail Help / Using filters</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>110</wp:post_id>
		<wp:post_date>2015-05-29 14:10:05</wp:post_date>
		<wp:post_date_gmt>2015-05-29 11:10:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gmail-advanced-search-operators</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="gmail"><![CDATA[gmail]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Parse Files Recursively using Java 7+</title>
		<link>http://cristian.sulea.net/blog/parse-files-recursively-using-java-7/</link>
		<pubDate>Fri, 26 Jun 2015 13:54:57 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=241</guid>
		<description></description>
		<content:encoded><![CDATA[To walk a file tree is a relatively simple task.
It can be done with the <a href="http://docs.oracle.com/javase/7/docs/api/java/nio/file/FileVisitor.html">FileVisitor</a> interface.

A <strong>FileVisitor</strong> specifies the required behavior at key points in the traversal process: when a file is visited, before a directory is accessed, after a directory is accessed, or when a failure occurs. The interface has four methods that correspond to these situations:

<ul>
	<li><strong>postVisitDirectory</strong> - Invoked for a directory after entries in the directory, and all of their descendants, have been visited.</li>
	<li><strong>preVisitDirectory</strong> - Invoked for a directory before entries in the directory are visited.</li>
	<li><strong>visitFile</strong> - Invoked for a file in a directory.</li>
	<li><strong>visitFileFailed </strong>- Invoked for a file that could not be visited.</li>
</ul>

<h2>Example: Recursive Listing of a Directory</h2>

[code lang="java" title="RecursiveListing.java"]

import java.io.IOException;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.attribute.BasicFileAttributes;

public class RecursiveListing {

  public static void main(String[] args) throws IOException {

    Path directory = Paths.get(&quot;src&quot;);

    Files.walkFileTree(directory, new SimpleFileVisitor&lt;Path&gt;() {

      @Override
      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
        System.out.println(dir);
        return FileVisitResult.CONTINUE;
      }

      @Override
      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
        System.out.println(file);
        return FileVisitResult.CONTINUE;
      }
    });
  }
}
[/code]

The output should be something like:

[code]
src
src\main
src\main\java
src\main\java\tests
src\main\java\tests\Frame.java
src\main\java\tests\HelloWorldSwing.java
src\main\java\tests\Metadata.java
src\main\java\tests\MetadataExample.java
src\main\java\tests\PassWordFrame.java
src\main\java\tests\RecursiveListing.java
src\main\java\tests2
src\main\java\tests2\Frame.java
src\main\resources
src\test
src\test\java
src\test\resources
[/code]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>241</wp:post_id>
		<wp:post_date>2015-06-26 16:54:57</wp:post_date>
		<wp:post_date_gmt>2015-06-26 13:54:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>parse-files-recursively-using-java-7</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="files"><![CDATA[files]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Install Eclipse on Linux Ubuntu</title>
		<link>http://cristian.sulea.net/blog/install-eclipse-on-linux-ubuntu/</link>
		<pubDate>Thu, 16 Oct 2014 14:43:41 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=279</guid>
		<description></description>
		<content:encoded><![CDATA[Extract the eclipse download and move to opt:

[code]
tar xvzf eclipse*.tar.gz
sudo mv eclipse /opt/eclipse
[/code]

Then create an eclipse executable in your path:

[code]
sudo touch /usr/bin/eclipse
sudo chmod 755 /usr/bin/eclipse
sudo gedit /usr/bin/eclipse
[/code]

with this contents:

[code]
#!/bin/sh
export ECLIPSE_HOME=&quot;/opt/eclipse&quot;
$ECLIPSE_HOME/eclipse $*
[/code]

Then create a gnome menu item:

[code]
sudoedit /usr/share/applications/eclipse.desktop
[/code]

with this contents:

[code]
[Desktop Entry]
Encoding=UTF-8
Name=Eclipse
Comment=Eclipse IDE
Exec=eclipse
Icon=/opt/eclipse/icon.xpm
Terminal=false
Type=Application
Categories=GNOME;Application;Development;
StartupNotify=true
[/code]

You now have a working eclipse, but run this command first to initialise the set up:

[code]
/opt/eclipse/eclipse -clean
[/code]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>279</wp:post_id>
		<wp:post_date>2014-10-16 17:43:41</wp:post_date>
		<wp:post_date_gmt>2014-10-16 14:43:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>install-eclipse-on-linux-ubuntu</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="eclipse"><![CDATA[eclipse]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="ubuntu"><![CDATA[ubuntu]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PHP - List Files and Directories</title>
		<link>http://cristian.sulea.net/blog/php-list-files-and-directories/</link>
		<pubDate>Wed, 01 Jul 2015 12:50:42 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=287</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>The DirectoryIterator class</h2>

[code lang="php"]
foreach (new DirectoryIterator('.') as $file) {
    if ($file-&gt;isDot()) continue;
    print $file-&gt;getFilename() . '&lt;br&gt;';
}
[/code]

<ul>
	<li><a href="http://php.net/manual/en/class.directoryiterator.php">http://php.net/manual/en/class.directoryiterator.php</a></li>
</ul>

<h2>scandir</h2>

[code lang="php"]
$files = scandir('.');
foreach($files as $file) {
    if ($file == '.' || $file == '..') continue;
    print $file . '&lt;br&gt;';
}
[/code]

<ul>
	<li><a href="http://php.net/manual/en/function.scandir.php">http://php.net/manual/en/function.scandir.php</a></li>
</ul>

<h2>opendir and readdir</h2>

[code lang="php"]
if ($handle = opendir('.')) {
    while (false !== ($file = readdir($handle))) {
        if($file == '.' || $file == '..') continue;
        print $file . '&lt;br&gt;';
    }
    closedir($handle);
}
[/code]

<ul>
	<li><a href="http://php.net/manual/en/function.opendir.php">http://php.net/manual/en/function.opendir.php</a></li>
	<li><a href="http://php.net/manual/en/function.readdir.php">http://php.net/manual/en/function.readdir.php</a></li>
</ul>

<h2>glob</h2>

[code lang="php"]
foreach (glob(&quot;*&quot;) as $file) {
    if ($file == '.' || $file == '..') continue;
    print $file . '&lt;br&gt;';
}
[/code]

<ul>
	<li><a href="http://php.net/manual/en/function.glob.php">http://php.net/manual/en/function.glob.php</a></li>
</ul>

<h2>Resources</h2>
<ul>
	<li><a href="http://php.net/manual/en/index.php">PHP Manual</a></li>
	<li><a href="http://stackoverflow.com/users/16417/paolo-bergantino">Paolo Bergantino</a> answered to a question posted on <a href="http://stackoverflow.com/questions/1086105/get-the-files-inside-a-directory">Stack Overflow</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>287</wp:post_id>
		<wp:post_date>2015-07-01 15:50:42</wp:post_date>
		<wp:post_date_gmt>2015-07-01 12:50:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>php-list-files-and-directories</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="files"><![CDATA[files]]></category>
		<category domain="category" nicename="php"><![CDATA[PHP]]></category>
		<category domain="post_tag" nicename="php"><![CDATA[php]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Install SSH Server on Linux Debian</title>
		<link>http://cristian.sulea.net/blog/install-ssh-server-on-linux-debian/</link>
		<pubDate>Sat, 02 Aug 2014 12:25:09 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=299</guid>
		<description></description>
		<content:encoded><![CDATA[[code]
apt-get install openssh-server
[/code]

<h2>Resources:</h2>
<ul>
	<li><a href="https://wiki.debian.org/SSH">https://wiki.debian.org/SSH</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>299</wp:post_id>
		<wp:post_date>2014-08-02 15:25:09</wp:post_date>
		<wp:post_date_gmt>2014-08-02 12:25:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>install-ssh-server-on-linux-debian</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debian"><![CDATA[debian]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="ssh"><![CDATA[ssh]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_c4cc4ba5c6dda20da617612cf64bb587</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Install FTP Server on Linux Debian (vsftpd)</title>
		<link>http://cristian.sulea.net/blog/install-ftp-server-on-linux-debian-vsftpd/</link>
		<pubDate>Sun, 03 Aug 2014 12:28:34 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=302</guid>
		<description></description>
		<content:encoded><![CDATA[[code]
apt-get install vsftpd
[/code]

[code]
mkdir -p /var/ftp
mkdir -p /var/ftp/incoming
chmod 777 /var/ftp/incoming
[/code]

[code]
echo -e &quot;Anonymous users can only write in \&quot;incoming\&quot; folder.\n&quot; &gt; /var/ftp/README.txt
[/code]

[code]
mv /etc/vsftpd.conf /etc/vsftpd.conf.original
nano /etc/vsftpd.conf
[/code]

[code title="vsftpd.conf"]
listen=YES

write_enable=YES

local_enable=NO
local_root=/home
chroot_local_user=YES

anonymous_enable=YES
anon_root=/var/ftp
anon_upload_enable=YES
anon_mkdir_write_enable=YES
anon_other_write_enable=YES
anon_umask=000

use_localtime=YES
[/code]

Don't forget to restart the server.

[code]
service vsftpd restart
[/code]

<h2>VSFTPD over SSL</h2>

[code]
ssl_enable=YES
ssl_tlsv1=YES
ssl_sslv2=YES
ssl_sslv3=YES
rsa_cert_file=/etc/vsftpd/vsftpd.pem
force_local_data_ssl=YES
[/code]

<h2>Resources:</h2>
<ul>
	<li><a href="https://security.appspot.com/vsftpd.html">https://security.appspot.com/vsftpd.html</a></li>
	<li><a href="http://www.g-loaded.eu/2008/12/02/set-up-an-anonymous-ftp-server-with-vsftpd-in-less-than-a-minute/">http://www.g-loaded.eu/2008/12/02/set-up-an-anonymous-ftp-server-with-vsftpd-in-less-than-a-minute/</a></li>
	<li><a href="http://netpenthe.wordpress.com/2007/09/06/vsftpd-over-ssl/">http://netpenthe.wordpress.com/2007/09/06/vsftpd-over-ssl/</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>302</wp:post_id>
		<wp:post_date>2014-08-03 15:28:34</wp:post_date>
		<wp:post_date_gmt>2014-08-03 12:28:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>install-ftp-server-on-linux-debian-vsftpd</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debian"><![CDATA[debian]]></category>
		<category domain="post_tag" nicename="ftp"><![CDATA[ftp]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="vsftpd"><![CDATA[vsftpd]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Install Proxy Server on Linux Debian (SQUID Web Proxy Cache)</title>
		<link>http://cristian.sulea.net/blog/install-proxy-server-on-linux-debian-squid-web-proxy-cache/</link>
		<pubDate>Mon, 04 Aug 2014 12:52:14 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=323</guid>
		<description></description>
		<content:encoded><![CDATA[[code]
apt-get install squid3
[/code]

[code]
mv /etc/squid3/squid.conf /etc/squid3/squid.conf.original
nano /etc/squid3/squid.conf
[/code]

[code title="squid.conf"]
http_port 8080

acl all src all
http_access allow all

cache_peer 192.168.1.29 parent 8080 0 no-query default login=user:pass
never_direct allow all

maximum_object_size 40960 KB

#refresh_pattern .*\.(zip|rar|iso) 2880  0% 2880 override-expire
[/code]

<h2>Add a Disk Cache Directory</h2>

[code]
cache_dir ufs /usr/local/squid/var/cache/squid 500 16 256
[/code]

[code title="Windows"]
cache_dir ufs c:/squid/var/cache 500 16 256
[/code]

<h2>Resources</h2>
<ul>
	<li><a href="http://www.squid-cache.org/">http://www.squid-cache.org/</a></li>
	<li><a href="http://wiki.squid-cache.org/SquidFaq/ConfiguringSquid">http://wiki.squid-cache.org/SquidFaq/ConfiguringSquid</a></li>
	<li><a href="http://wiki.squid-cache.org/Features/CacheHierarchy">http://wiki.squid-cache.org/Features/CacheHierarchy</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>323</wp:post_id>
		<wp:post_date>2014-08-04 15:52:14</wp:post_date>
		<wp:post_date_gmt>2014-08-04 12:52:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>install-proxy-server-on-linux-debian-squid-web-proxy-cache</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debian"><![CDATA[debian]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="proxy"><![CDATA[proxy]]></category>
		<category domain="post_tag" nicename="squid"><![CDATA[squid]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_54565d8b5397cf7413bc0026a1f349c8</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_36c899a71fe86133c6d0db1090e48029</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_6a818d3544ed21a0ca8f46ab18fb3787</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Install Maven on Linux Debian</title>
		<link>http://cristian.sulea.net/blog/install-maven-on-linux-debian/</link>
		<pubDate>Sun, 07 Sep 2014 13:37:30 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=344</guid>
		<description></description>
		<content:encoded><![CDATA[[code]
apt-get install maven
[/code]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>344</wp:post_id>
		<wp:post_date>2014-09-07 16:37:30</wp:post_date>
		<wp:post_date_gmt>2014-09-07 13:37:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>install-maven-on-linux-debian</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debian"><![CDATA[debian]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="maven"><![CDATA[maven]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Install Jenkins on Linux Debian</title>
		<link>http://cristian.sulea.net/blog/install-jenkins-on-linux-debian/</link>
		<pubDate>Mon, 08 Sep 2014 13:38:32 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=345</guid>
		<description></description>
		<content:encoded><![CDATA[[code]
wget -q -O - http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key | apt-key add -
sh -c 'echo deb http://pkg.jenkins-ci.org/debian binary/ &gt; /etc/apt/sources.list.d/jenkins.list'
apt-get update
apt-get install jenkins
[/code]

<h2>Upgrade</h2>

[code]
apt-get update
apt-get install jenkins
[/code]

<h2>Resources</h2>
<ul>
	<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Ubuntu">https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+on+Ubuntu</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>345</wp:post_id>
		<wp:post_date>2014-09-08 16:38:32</wp:post_date>
		<wp:post_date_gmt>2014-09-08 13:38:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>install-jenkins-on-linux-debian</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debian"><![CDATA[debian]]></category>
		<category domain="post_tag" nicename="jenkins"><![CDATA[jenkins]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_4deba7c0aa2ea4998699454cc3c0a9c1</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Install Maven Repository on Linux Debian (Sonatype Nexus)</title>
		<link>http://cristian.sulea.net/blog/install-maven-repository-on-linux-debian-sonatype-nexus/</link>
		<pubDate>Tue, 09 Sep 2014 13:39:32 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=346</guid>
		<description></description>
		<content:encoded><![CDATA[[code]
adduser nexus
[/code]

[code]
wget www.sonatype.org/downloads/nexus-latest-bundle.tar.gz
tar -zxvf nexus-latest-bundle.tar.gz
ln -s nexus-x.x.x-xx nexus
[/code]

[code]
cp /home/nexus/nexus/bin/nexus /etc/init.d/nexus
chmod 755 /etc/init.d/nexus
nano /etc/init.d/nexus
[/code]

[code title="nexus"]
NEXUS_HOME=&quot;/home/nexus/nexus&quot;
RUN_AS_USER=nexus
PIDDIR=&quot;/home/nexus&quot;
[/code]

[code]
cd /etc/init.d
update-rc.d nexus defaults
service nexus start
[/code]

<h2>Resources</h2>
<ul>
	<li><a href="http://www.sonatype.org/nexus/go">http://www.sonatype.org/nexus/go</a></li>
	<li><a href="http://books.sonatype.com/nexus-book/reference/install-sect-service.html">http://books.sonatype.com/nexus-book/reference/install-sect-service.html</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>346</wp:post_id>
		<wp:post_date>2014-09-09 16:39:32</wp:post_date>
		<wp:post_date_gmt>2014-09-09 13:39:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>install-maven-repository-on-linux-debian-sonatype-nexus</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debian"><![CDATA[debian]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="maven"><![CDATA[maven]]></category>
		<category domain="post_tag" nicename="nexus"><![CDATA[nexus]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Singleton Pattern</title>
		<link>http://cristian.sulea.net/blog/the-singleton-pattern/</link>
		<pubDate>Wed, 16 Jul 2014 13:27:10 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=356</guid>
		<description></description>
		<content:encoded><![CDATA[Singleton pattern is a design solution where you can:
<ul>
	<li>ensure that only one instance of a class is created;</li>
	<li>provide a global point of access to the object;</li>
	<li>allow multiple instances in the future without affecting a singleton class's clients.</li>
</ul>

<h2>Lazy initialization</h2>

In computer programming, <a href="https://en.wikipedia.org/wiki/Lazy_initialization">lazy initialization</a> is the tactic of delaying the creation of an object, the calculation of a value, or some other expensive process until the first time it is needed.

[code lang="java" title="EagerSingleton.java"]

public class EagerSingleton {

  private static volatile EagerSingleton instance = null;

  public static EagerSingleton getInstance() {

    if (instance == null) {
      synchronized (EagerSingleton.class) {
        if (instance == null) {
          instance = new EagerSingleton();
        }
      }
    }

    return instance;
  }

  // private constructor prevents instantiation from other classes
  private EagerSingleton() {}
}
[/code]

This method uses <a href="http://en.wikipedia.org/wiki/Double_checked_locking_pattern">double-checked locking</a>, which should not be used prior to J2SE 5.0 as it is vulnerable to subtle bugs.

<h2>Eager initialization</h2>

If the program will always need an instance, or if the cost of creating the instance is not too large in terms of time/resources, the programmer can switch to eager initialization, which always creates an instance.

[code lang="java" title="EagerSingleton.java"]

public class EagerSingleton {

  private static volatile EagerSingleton instance = new EagerSingleton();

  public static EagerSingleton getInstance() {
    return instance;
  }

  // private constructor prevents instantiation from other classes
  private EagerSingleton() {}
}
[/code]

This method has a number of advantages:
<ul>
	<li>the instance is not constructed until the class is used;</li>
	<li>there is no need to synchronize the getInstance() method, meaning all threads will see the same instance and no (expensive) locking is required;</li>
	<li>the <code>final</code> keyword means that the instance cannot be redefined, ensuring that one (and only one) instance ever exists.</li>
</ul>

<h2>Static block initialization</h2>

The static blocks are executed during the loading of class and even before the constructor is called so the programmer can use this feature in the singleton pattern.

[code lang="java" title="StaticBlockSingleton.java"]

public class StaticBlockSingleton {

  private static final StaticBlockSingleton INSTANCE;

  static {
    try {
      INSTANCE = new StaticBlockSingleton();
    } catch (Exception e) {
      throw new RuntimeException(&quot;Unexpected exception!!!...&quot;, e);
    }
  }

  public static StaticBlockSingleton getInstance() {
    return INSTANCE;
  }

  // private constructor prevents instantiation from other classes
  private StaticBlockSingleton() {}
}
[/code]

This method has one drawback. Suppose there are 5 static fields in class and application code needs to access only 2 or 3, for which instance creation is not required at all. So, if we use this static initialization, we will have one instance created though we require it or not.

<h2>Bill Pugh solution</h2>

Bill Pugh was main force behind <a href="http://en.wikipedia.org/wiki/Java_Memory_Model">java memory model</a> changes. His principle (<a href="http://en.wikipedia.org/wiki/Initialization_on_demand_holder_idiom">initialization-on-demand holder idiom</a>) also uses static block but in different way. It suggest to use static inner class.

[code lang="java" title="BillPughSingleton.java"]

public class BillPughSingleton {

  private static class LazyHolder {
    private static final BillPughSingleton INSTANCE = new BillPughSingleton();
  }

  public static BillPughSingleton getInstance() {
    return LazyHolder.INSTANCE;
  }

  // private constructor prevents instantiation from other classes
  private BillPughSingleton() {}
}
[/code]

The <code>LazyHolder</code> is loaded on the first execution of <code>BillPughSingleton.getInstance()</code> or the first access to <code>LazyHolder.INSTANCE</code>, not before.

<h2>Using Enum</h2>

This type of implementation recommend the use of <code>enum</code>. <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Enum.html">Enum</a>, as written in java docs, provide implicit support for thread safety and only one instance is guaranteed. This is also a good way to have singleton with minimum effort.

[code lang="java" title="EnumSingleton.java"]

public enum EnumSingleton {
  INSTANCE;
  public void doSomething(String param) {
    // perform operation here 
  }
}
[/code]

The public method can be written to take any desired types of arguments; a single <code>String</code> argument is used here as an example.

This approach implements the singleton by taking advantage of Java's guarantee that any <code>enum</code> value is instantiated only once in a Java program. Since Java enum values are globally accessible, so is the singleton, initialized lazily by the classloader. The drawback is that the <code>enum</code> type is somewhat inflexible.

<h2>Resources</h2>
<ul>
	<li><a href="http://en.wikipedia.org/wiki/Lazy_initialization">Lazy initialization</a></li>
	<li><a href="http://en.wikipedia.org/wiki/Double_checked_locking_pattern">Double-checked locking</a></li>
	<li><a href="http://en.wikipedia.org/wiki/Java_Memory_Model">Java Memory Model</a></li>
	<li><a href="http://en.wikipedia.org/wiki/Initialization_on_demand_holder_idiom">Initialization_on_demand_holder_idiom</a></li>
	<li><a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Enum.html">http://docs.oracle.com/javase/7/docs/api/java/lang/Enum.html</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>356</wp:post_id>
		<wp:post_date>2014-07-16 16:27:10</wp:post_date>
		<wp:post_date_gmt>2014-07-16 13:27:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-singleton-pattern</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="singleton"><![CDATA[singleton]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Portable SVN Repository</title>
		<link>http://cristian.sulea.net/blog/portable-svn-repository/</link>
		<pubDate>Sun, 26 Oct 2014 15:14:42 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=365</guid>
		<description></description>
		<content:encoded><![CDATA[An easy way to keep things in sync and transfer the code when developing code on different systems is to use a flash drive (or a file hosting service, like <a href="http://www.dropbox.com">Dropbox</a> for example) as a subversion repository.

To create the repository, run the <code>create</code> command in the portable device folder you want the repository:

[code]
svnadmin create repo-name
[/code]

The repository location will be:

[code]
file://repo-path/repo-name
[/code]

For example:

[code]
cd C:/Users/admin/SVN/
svnadmin create MyProject
[/code]

Or:

[code]
svnadmin create C:/Users/admin/SVN/MyProject
[/code]

And the repository location will be:

[code]file://C:/Users/admin/SVN/MyProject[/code]

<a href="http://www.sliksvn.com/en/download">Slik SVN</a> is a standalone command line Subversion package for Windows. The installer contains all command line tools (<code>svn</code>, <code>svnadmin</code>, <code>svnsync</code>, <code>svnserve</code>, <code>svnmucc</code>, etc.) but no application bindings nor Apache modules.

The repository can be checked out from the portable device on any PC. For example, <a href="http://tortoisesvn.net">TortoiseSVN</a> can be used to checkout your portable repository and track changes on Windows.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>365</wp:post_id>
		<wp:post_date>2014-10-26 17:14:42</wp:post_date>
		<wp:post_date_gmt>2014-10-26 15:14:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>portable-svn-repository</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="code"><![CDATA[code]]></category>
		<category domain="post_tag" nicename="portable"><![CDATA[portable]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="post_tag" nicename="source"><![CDATA[source]]></category>
		<category domain="post_tag" nicename="svn"><![CDATA[svn]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>XStream - Quick start tutorial</title>
		<link>http://cristian.sulea.net/blog/xstream-quick-start-tutorial/</link>
		<pubDate>Mon, 10 Nov 2014 08:54:28 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=371</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://xstream.codehaus.org">XStream</a> is a simple java library to serialize objects to XML and back again.

<h2>Create classes to be serialized</h2>

[code lang="java" title="Contact.java"]

public class Contact {
 
    private String name;
 
    private List&lt;Address&gt; addresses;
 
    public Contact(String name, Address... addresses) {
        this.name = name;
        this.addresses = new ArrayList&lt;Address&gt;(Arrays.asList(addresses));
    }
 
    public Contact(String name, List&lt;Address&gt; addresses) {
        this.name = name;
        this.addresses = addresses;
    }
 
    // ... other constructors and methods
}
[/code]

[code lang="java" title="Address.java"]

public class Address {
 
    private String street;
    private String city;
 
    public Address(String street, String city) {
        this.street = street;
        this.city = city;
    }
 
    // ... other constructors and methods
}
[/code]

XStream doesn't care about the visibility of the fields. No getters or setters are needed.
Also, XStream does not limit you to having a default constructor.

<h2>Initializing XStream</h2>

[code lang="java"]
XStream xStream = new XStream();
[/code]

In this case you require in the classpath <a href="http://www.extreme.indiana.edu/xgws/xsoap/xpp/">XPP3</a>, a very fast XML pull-parser implementation.

If you do not want to include these dependencies, you can use a standard <a href="http://en.wikipedia.org/wiki/Java_API_for_XML_Processing">JAXP DOM</a> parser:

[code lang="java"]
// does not require XPP3 library
XStream xStream = new XStream(new DomDriver());
[/code]

or since Java 6 the integrated <a href="http://en.wikipedia.org/wiki/StAX">StAX</a> parser instead:

[code lang="java"]
// does not require XPP3 library starting with Java 6
XStream xStream = new XStream(new StaxDriver());
[/code]

To make the XML more concise, you can create aliases for your custom class names to XML element names:

[code lang="java"]
xStream.alias(&quot;contact&quot;, Contact.class);
xStream.alias(&quot;address&quot;, Address.class);
[/code]

<h2>Serializing an object to XML</h2>

Create the object:

[code lang="java"]

Address address1 = new Address(&quot;My Street&quot;, &quot;Bucharest&quot;);
Address address2 = new Address(&quot;Another Street&quot;, &quot;Bucharest&quot;);

Contact contact = new Contact(&quot;Cristian Sulea&quot;, address1, address2);
[/code]

Convert the object to XML:

[code lang="java"]
String xml = xStream.toXML(contact);
[/code]

The resulting XML is:

[code lang="xml"]
&lt;contact&gt;
    &lt;name&gt;Cristian Sulea&lt;/name&gt;
    &lt;addresses&gt;
        &lt;address&gt;
            &lt;street&gt;My Street&lt;/street&gt;
            &lt;city&gt;Bucharest&lt;/city&gt;
        &lt;/address&gt;
        &lt;address&gt;
            &lt;street&gt;Another Street&lt;/street&gt;
            &lt;city&gt;Bucharest&lt;/city&gt;
        &lt;/address&gt;
    &lt;/addresses&gt;
&lt;/contact&gt;
[/code]

<h2>Deserializing an object back from XML</h2>

[code lang="java"]
Contact contact = (Contact) xStream.fromXML(xml);
[/code]

<h2>Putting It All Together</h2>

All the code in a single <code>class</code> to make'it easier to copy/paste/run and then play with the code.

[code lang="java" title="XStreamTutorial.java"]

package xstream.tutorial;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;

public class XStreamTutorial {

  public static void main(String[] args) {

    XStream xStream = new XStream(new DomDriver());

    xStream.alias(&quot;contact&quot;, Contact.class);
    xStream.alias(&quot;address&quot;, Address.class);

    Address address1 = new Address(&quot;My Street&quot;, &quot;Bucharest&quot;);
    Address address2 = new Address(&quot;Another Street&quot;, &quot;Bucharest&quot;);

    Contact contact = new Contact(&quot;Cristian Sulea&quot;, address1, address2);

    xStream.toXML(contact, System.out);
  }

  public static class Contact {

    private String name;

    private List&lt;Address&gt; addresses;

    public Contact(String name, Address... addresses) {
      this.name = name;
      this.addresses = new ArrayList&lt;Address&gt;(Arrays.asList(addresses));
    }

    public Contact(String name, List&lt;Address&gt; addresses) {
      this.name = name;
      this.addresses = addresses;
    }

    public String getName() {
      return name;
    }

    public void setName(String name) {
      this.name = name;
    }

    public List&lt;Address&gt; getAddresses() {
      return addresses;
    }

    public void setAddresses(List&lt;Address&gt; addresses) {
      this.addresses = addresses;
    }
  }

  public static class Address {

    private String street;
    private String city;

    public Address(String street, String city) {
      this.street = street;
      this.city = city;
    }

    public String getStreet() {
      return street;
    }

    public void setStreet(String street) {
      this.street = street;
    }

    public String getCity() {
      return city;
    }

    public void setCity(String city) {
      this.city = city;
    }
  }
}
[/code]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>371</wp:post_id>
		<wp:post_date>2014-11-10 10:54:28</wp:post_date>
		<wp:post_date_gmt>2014-11-10 08:54:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>xstream-quick-start-tutorial</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="post_tag" nicename="xml"><![CDATA[xml]]></category>
		<category domain="category" nicename="xstream"><![CDATA[XStream]]></category>
		<category domain="post_tag" nicename="xstream"><![CDATA[xstream]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>XStream - Quick start JSON tutorial</title>
		<link>http://cristian.sulea.net/blog/xstream-quick-start-json-tutorial/</link>
		<pubDate>Tue, 11 Nov 2014 09:12:06 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=376</guid>
		<description></description>
		<content:encoded><![CDATA[Please check the <a href="http://cristian.sulea.net/blog/xstream-quick-start-tutorial/">XStream - Quick start tutorial</a>.
The only difference is the line with the initialization:

[code lang="java"]
XStream xStream = new XStream(new JsonHierarchicalStreamDriver());
[/code]

The output is as follows:

[code lang="js"]
{&quot;contact&quot;: {
  &quot;name&quot;: &quot;Cristian Sulea&quot;,
  &quot;addresses&quot;: [
    {
      &quot;street&quot;: &quot;My Street&quot;,
      &quot;city&quot;: &quot;Bucharest&quot;
    },
    {
      &quot;street&quot;: &quot;Another Street&quot;,
      &quot;city&quot;: &quot;Bucharest&quot;
    }
  ]
}}
[/code]

<h2>Dropping the root</h2>

Sometimes the root node in the generated JSON is superfluous, since its name is caused by the Java type of the written object that has no meaning in JSON and increases only the nesting level of the structure. Therefore it is possible to drop this root by initializing the internally used <a href="http://xstream.codehaus.org/javadoc/com/thoughtworks/xstream/io/json/JsonWriter.html">JsonWriter</a> in a different mode. Again, the only difference is in the initialization:

[code lang="java"]
XStream xStream = new XStream(new JsonHierarchicalStreamDriver() {
  public HierarchicalStreamWriter createWriter(Writer writer) {
    return new JsonWriter(writer, JsonWriter.DROP_ROOT_MODE);
  }
});
[/code]

The output is as follows:

[code lang="js"]
{
  &quot;name&quot;: &quot;Cristian Sulea&quot;,
  &quot;addresses&quot;: [
    {
      &quot;street&quot;: &quot;My Street&quot;,
      &quot;city&quot;: &quot;Bucharest&quot;
    },
    {
      &quot;street&quot;: &quot;Another Street&quot;,
      &quot;city&quot;: &quot;Bucharest&quot;
    }
  ]
}
[/code]

<h2>Read from JSON</h2>

[code lang="java"]
Contact contact = (Contact) xStream.fromXML(json);
[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>376</wp:post_id>
		<wp:post_date>2014-11-11 11:12:06</wp:post_date>
		<wp:post_date_gmt>2014-11-11 09:12:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>xstream-quick-start-json-tutorial</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="post_tag" nicename="json"><![CDATA[json]]></category>
		<category domain="category" nicename="xstream"><![CDATA[XStream]]></category>
		<category domain="post_tag" nicename="xstream"><![CDATA[xstream]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>XStream - Object references</title>
		<link>http://cristian.sulea.net/blog/xstream-object-references/</link>
		<pubDate>Wed, 12 Nov 2014 09:26:01 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=384</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://xstream.codehaus.org">XStream</a> is a simple java library to serialize objects to XML and back again.

But how does XStream deals with duplicate and circular references?
By default is using XPath to allow serialized objects to be treated as graphs instead of simple trees (typical XML usage).

The objects:

[code lang="java" title="Contact.java"]

public class Contact {

  private String name;

  private List&lt;Address&gt; addresses;

  public Contact(String name, Address... addresses) {
    this.name = name;
    this.addresses = new ArrayList&lt;Address&gt;(Arrays.asList(addresses));
  }

  public Contact(String name, List&lt;Address&gt; addresses) {
    this.name = name;
    this.addresses = addresses;
  }

  // ... other constructors and methods
}
[/code]

[code lang="java" title="Address.java"]

public class Address {

  private String street;
  private String city;

  public Address(String street, String city) {
    this.street = street;
    this.city = city;
  }

  // ... other constructors and methods
}
[/code]

The test code:

[code lang="java"]

public static void main(String[] args) {

  XStream xStream = new XStream(new DomDriver());

  xStream.alias(&quot;contact&quot;, Contact.class);
  xStream.alias(&quot;address&quot;, Address.class);

  Address address = new Address(&quot;My Street&quot;, &quot;Bucharest&quot;);

  Contact contact = new Contact(&quot;Cristian Sulea&quot;, address, address);

  xStream.toXML(contact, System.out);
}
[/code]

<h2>XPath Relative</h2>

If we execute the test code, XStream's uses its default mode called <code>XPATH_RELATIVE_REFERENCES</code> based on the W3C XPath specification:

[code lang="xml"]
&lt;contact&gt;
  &lt;name&gt;Cristian Sulea&lt;/name&gt;
  &lt;addresses&gt;
    &lt;address&gt;
      &lt;street&gt;My Street&lt;/street&gt;
      &lt;city&gt;Bucharest&lt;/city&gt;
    &lt;/address&gt;
    &lt;address reference=&quot;../address&quot; /&gt;
  &lt;/addresses&gt;
&lt;/contact&gt;
[/code]

The explicit call is:

[code lang="java"]
xStream.setMode(XStream.XPATH_RELATIVE_REFERENCES);
[/code]

<h2>XPath Absolute</h2>

There is also an absolute mode which is easy to use and understand:

[code lang="java"]
xStream.setMode(XStream.XPATH_ABSOLUTE_REFERENCES);
[/code]

In this case the resulting XML is:

[code lang="xml"]
&lt;contact&gt;
    &lt;name&gt;Cristian Sulea&lt;/name&gt;
    &lt;addresses&gt;
        &lt;address&gt;
            &lt;street&gt;My Street&lt;/street&gt;
            &lt;city&gt;Bucharest&lt;/city&gt;
        &lt;/address&gt;
        &lt;address reference=&quot;/contact/addresses/address&quot;/&gt;
    &lt;/addresses&gt;
&lt;/contact&gt;
[/code]

<h2>Single Node Selectors</h2>

In some cases where the XML is used later on or is generated by someone else, the XPath selectors can be forced to select always a single node instead of a node list where the first element is taken.

Therefore two more modes exist:

[code lang="java"]
xStream.setMode(XStream.SINGLE_NODE_XPATH_ABSOLUTE_REFERENCES);
[/code]

with resulting XML

[code lang="xml"]
&lt;contact&gt;
  &lt;name&gt;Cristian Sulea&lt;/name&gt;
  &lt;addresses&gt;
    &lt;address&gt;
      &lt;street&gt;My Street&lt;/street&gt;
      &lt;city&gt;Bucharest&lt;/city&gt;
    &lt;/address&gt;
    &lt;address reference=&quot;/contact[1]/addresses[1]/address[1]&quot; /&gt;
  &lt;/addresses&gt;
&lt;/contact&gt;
[/code]

and

[code lang="java"]
xStream.setMode(XStream.SINGLE_NODE_XPATH_RELATIVE_REFERENCES);
[/code]

with resulting XML

[code lang="xml"]
&lt;contact&gt;
  &lt;name&gt;Cristian Sulea&lt;/name&gt;
  &lt;addresses&gt;
    &lt;address&gt;
      &lt;street&gt;My Street&lt;/street&gt;
      &lt;city&gt;Bucharest&lt;/city&gt;
    &lt;/address&gt;
    &lt;address reference=&quot;../address[1]&quot; /&gt;
  &lt;/addresses&gt;
&lt;/contact&gt;
[/code]

<h2>Id Mode</h2>

XStream has another mode which makes it is easier to read/write by a human being:

[code lang="java"]
xStream.setMode(XStream.SINGLE_NODE_XPATH_RELATIVE_REFERENCES);
[/code]

The result is a XML which generates an <code>id</code> attribute for each new object marshaled, and whenever it finds back or cross-references, it uses a <code>reference</code> attribute to so it doesn't copy the entire object:

[code lang="xml"]
&lt;contact id=&quot;1&quot;&gt;
  &lt;name&gt;Cristian Sulea&lt;/name&gt;
  &lt;addresses id=&quot;2&quot;&gt;
    &lt;address id=&quot;3&quot;&gt;
      &lt;street&gt;My Street&lt;/street&gt;
      &lt;city&gt;Bucharest&lt;/city&gt;
    &lt;/address&gt;
    &lt;address reference=&quot;3&quot; /&gt;
  &lt;/addresses&gt;
&lt;/contact&gt;
[/code]

<h2>NO References</h2>

For some uses of XStream we do not desire any kind of back or cross references like a graph, but a simple tree. Remember that in such scenarios it's impossible to represent a graph cycle (no tree contains such structure).

[code lang="java"]
xStream.setMode(XStream.NO_REFERENCES);
[/code]

In the resulting XML every reference shall be serialized:

[code lang="xml"]
&lt;contact&gt;
  &lt;name&gt;Cristian Sulea&lt;/name&gt;
  &lt;addresses&gt;
    &lt;address&gt;
      &lt;street&gt;My Street&lt;/street&gt;
      &lt;city&gt;Bucharest&lt;/city&gt;
    &lt;/address&gt;
    &lt;address&gt;
      &lt;street&gt;My Street&lt;/street&gt;
      &lt;city&gt;Bucharest&lt;/city&gt;
    &lt;/address&gt;
  &lt;/addresses&gt;
&lt;/contact&gt;
[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>384</wp:post_id>
		<wp:post_date>2014-11-12 11:26:01</wp:post_date>
		<wp:post_date_gmt>2014-11-12 09:26:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>xstream-object-references</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="category" nicename="xstream"><![CDATA[XStream]]></category>
		<category domain="post_tag" nicename="xstream"><![CDATA[xstream]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Extract MKV (Matroska) subtitles on Linux Ubuntu</title>
		<link>http://cristian.sulea.net/blog/extract-mkv-matroska-subtitles-on-linux-ubuntu/</link>
		<pubDate>Mon, 15 Dec 2014 13:10:45 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=387</guid>
		<description></description>
		<content:encoded><![CDATA[Install <a href="http://www.bunkus.org/videotools/mkvtoolnix/">MKVToolNix</a> (cross-platform set of tools to create, alter and inspect Matroska files):

[code]
sudo apt-get install mkvtoolnix
[/code]

Find the subtitle track number and the attachment IDs of the fonts using <a href="http://www.bunkus.org/videotools/mkvtoolnix/doc/mkvinfo.html">mkvinfo</a> tool (print information about elements in Matroska files):

[code]
mkvinfo movie.mkv
[/code]

or using the GUI version:

[code]
mkvinfo -g
[/code]

Assuming the subtitles are track 3, extract them using <a href="http://www.bunkus.org/videotools/mkvtoolnix/doc/mkvextract.html">mkvextract</a> tool (extract tracks from Matroska files into other files):

[code]
mkvextract tracks movie.mkv 3:movie.***
[/code]

Optionally extract also the font (by not specifying a file name for the font, the filename of the attached font will be used; this needs to be done for each font that is attached):

[code]
mkvextract attachments movie.mkv FontID:
[/code]

Install the fonts and regenerate the font cache so that the subtitles will be rendered properly:

[code]
cp *.ttf ~/.fonts
sudo fc-cache -v ~/.fonts
[/code]

Make sure that the file is in MSDOS (CR-LF) format by using <a href="http://manpages.debian.org/cgi-bin/man.cgi?query=flip">flip</a> command:

[code]
sudo apt-get install flip
flip -m movie.srt
[/code]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>387</wp:post_id>
		<wp:post_date>2014-12-15 15:10:45</wp:post_date>
		<wp:post_date_gmt>2014-12-15 13:10:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>extract-mkv-matroska-subtitles-on-linux-ubuntu</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="mkv"><![CDATA[mkv]]></category>
		<category domain="post_tag" nicename="ubuntu"><![CDATA[ubuntu]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Do not catch NullPointerException or any of its ancestors</title>
		<link>http://cristian.sulea.net/blog/do-not-catch-nullpointerexception-or-any-of-its-ancestors/</link>
		<pubDate>Tue, 20 Jan 2015 10:26:43 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=437</guid>
		<description></description>
		<content:encoded><![CDATA[Handling the underlying <code>null</code> pointer dereference by catching the <code>NullPointerException</code> rather than fixing the underlying problem is inappropriate for several reasons:

<ul>
	<li>catching <code>NullPointerException</code> adds significantly more performance overhead than simply adding the necessary <code>null</code> checks;</li>
	<li>when multiple expressions in a try block are capable of throwing a <code>NullPointerException</code>, it is difficult or impossible to determine which expression is responsible for the exception because the <code>NullPointerException</code> catch block handles any <code>NullPointerException</code> thrown from any location in the try block;</li>
	<li>programs rarely remain in an expected and usable state after a <code>NullPointerException</code> has been thrown; attempts to continue execution after first catching and logging (or worse, suppressing) the exception rarely succeed.</li>
</ul>

Likewise, programs must not catch <code>RuntimeException</code>, <code>Exception</code>, or <code>Throwable</code>. Few, if any, methods are capable of handling all possible runtime exceptions. When a method catches <code>RuntimeException</code>, it may receive exceptions unanticipated by the designer, including <code>NullPointerException</code> and <code>ArrayIndexOutOfBoundsException</code>. Many catch clauses simply log or ignore the enclosed exceptional condition and attempt to resume normal execution. Do not suppress or ignore checked exceptions. Runtime exceptions often indicate bugs in the program that should be fixed by the developer and often cause control flow vulnerabilities.

<h2>Noncompliant Code Example</h2>

This noncompliant code example defines an <code>isName()</code> method that takes a <code>String</code> argument and returns <code>true</code> if the given string is a valid name. A valid name is defined as two capitalized words separated by one or more spaces. Rather than checking to see whether the given string is <code>null</code>, the method catches <code>NullPointerException</code> and returns <code>false</code>.

[code lang="java"]

public boolean isName(String s) {
 
    try {
 
        String names[] = s.split(&quot; &quot;);
 
        if (names.length != 2) {
            return false;
        }
 
        return (isCapitalized(names[0]) &amp;&amp; isCapitalized(names[1]));
    }
 
    catch (NullPointerException e) {
        return false;
    }
}
[/code]

<h2>Compliant Solution</h2>

This compliant solution explicitly checks the <code>String</code> argument for <code>null</code> rather than catching <code>NullPointerException</code>.

[code lang="java"]

boolean isName(String s) {
 
    if (s == null) {
        return false;
    }
 
    String names[] = s.split(&quot; &quot;);
    if (names.length != 2) {
        return false;
    }
 
    return (isCapitalized(names[0]) &amp;&amp; isCapitalized(names[1]));
}
[/code]

<strong>Compliant Solution</strong>

This compliant solution omits an explicit check for a <strong>null</strong> reference and permits a <strong>NullPointerException</strong> to be thrown.

[code lang="java"]

boolean isName(String s) /* throws NullPointerException */ {
 
    String names[] = s.split(&quot; &quot;);
    if (names.length != 2) {
        return false;
    }
 
    return (isCapitalized(names[0]) &amp;&amp; isCapitalized(names[1]));
}
[/code]

<h2>Resources</h2>
<ul>
	<li><a href="https://www.securecoding.cert.org/confluence/display/java/ERR08-J.+Do+not+catch+NullPointerException+or+any+of+its+ancestors">CERT Secure Coding Standards / Do not catch NullPointerException or any of its ancestors</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>437</wp:post_id>
		<wp:post_date>2015-01-20 12:26:43</wp:post_date>
		<wp:post_date_gmt>2015-01-20 10:26:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>do-not-catch-nullpointerexception-or-any-of-its-ancestors</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>java.lang.UnsatisfiedLinkError no ***.dll in java.library.path</title>
		<link>http://cristian.sulea.net/blog/java-lang-unsatisfiedlinkerror-no-dll-in-java-library-path/</link>
		<pubDate>Sun, 15 Feb 2015 10:37:34 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=441</guid>
		<description></description>
		<content:encoded><![CDATA[The <code>UnsatisfiedLinkError</code> is thrown if the Java Virtual Machine cannot find an appropriate native-language definition of a method declared native.

In order for <code>System.loadLibrary()</code> to work, the library (on Windows, a DLL) must be in a directory somewhere on your <code>PATH</code> or on a path listed in the <code>java.library.path</code> system property, so you can launch Java like:

[code]
java -Djava.library.path=/path/to/dir
[/code]

Additionally, for <code>loadLibrary()</code>, you specify the base name of the library, without the <code>.dll</code> at the end. So, for <code>/path/to/dir/foo.dll</code>, you would just use:

[code lang="java"]
System.loadLibrary(&quot;foo&quot;)
[/code]

You also need to look at the exact UnsatisfiedLinkError that you are getting. If it says something like:

[code]
Exception in thread &quot;main&quot; java.lang.UnsatisfiedLinkError: no foo in java.library.path
[/code]

then it can't find the foo library (<code>foo.dll</code>) in your <code>PATH</code> or <code>java.library.path</code> specified at launch time.

If it says something like:

[code]
Exception in thread &quot;main&quot; java.lang.UnsatisfiedLinkError: com.example.program.ClassName.foo()V
[/code]

then something is wrong with the library itself in the sense that Java is not able to map a native Java function in your application to its actual native counterpart.

To start with, I would put some logging around your <code>System.loadLibrary()</code> call to see if that executes properly. If it throws an exception or is not in a code path that is actually executed, then you will always get the latter type of <code>UnsatisfiedLinkError</code> explained above.

As a side note, most people put their <code>loadLibrary()</code> calls into a static initializer block in the class with the native methods, to ensure that it is always executed exactly once:

[code lang="java"]

public class Foo {

    static {
        System.loadLibrary(&quot;foo&quot;);
    }

    public Foo() {}

}
[/code]

<h2>Resources</h2>
<ul>
	<li><a href="http://stackoverflow.com/questions/1403788/java-lang-unsatisfiedlinkerror-no-dll-in-java-library-path">Stack Overflow</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>441</wp:post_id>
		<wp:post_date>2015-02-15 12:37:34</wp:post_date>
		<wp:post_date_gmt>2015-02-15 10:37:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-lang-unsatisfiedlinkerror-no-dll-in-java-library-path</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java Cryptography</title>
		<link>http://cristian.sulea.net/blog/java-cryptography/</link>
		<pubDate>Tue, 10 Mar 2015 12:46:03 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=445</guid>
		<description></description>
		<content:encoded><![CDATA[Cryptography is a field looking at techniques for <strong>encoding and verifying things securely</strong>. It tends to focus on the following issues:
<ul>
	<li><strong>encryption</strong> of data so that an unauthorized third party cannot read it without a key of some sort;</li>
	<li><strong>authentication and validation</strong> (or <strong>certification</strong>);</li>
	<li><strong>computer protocols</strong> for using the previous two techniques correctly and in a way that allows all parties to know how they're being used (e.g. the TLS protocol allows a client to connect to a server over the Internet without the two machines previously knowing things such as session key or even preferred encryption method, maximum key length, etc).</li>
</ul>

<h2>Symmetric-key encryption in Java</h2>

This is the case where the **same key** is used to both encrypt and decrypt. It sometimes called <strong>secret-key encryption</strong>, <strong>single-key encryption</strong> or simply <strong>symmetric encryption</strong>. In Java, use an instance of <a href="http://docs.oracle.com/javase/7/docs/api/javax/crypto/Cipher.html">javax.crypto.Cipher</a>.

Encryption example:

[code lang="java"]

String passPhrase = &quot;secret sequence of bytes&quot;;
byte[] dataToEncrypt = &quot;data to encrypt&quot;.getBytes();

MessageDigest digest = MessageDigest.getInstance(&quot;SHA&quot;);
digest.update(passPhrase.getBytes());

Key key = new SecretKeySpec(digest.digest(), 0, 16, &quot;AES&quot;);

Cipher cipher = Cipher.getInstance(&quot;AES/ECB/PKCS5Padding&quot;);
cipher.init(Cipher.ENCRYPT_MODE, key);

byte[] encryptedData = cipher.doFinal(dataToEncrypt);

System.out.println(Arrays.toString(encryptedData));
[/code]

Decryption example:

[code lang="java"]

String passPhrase = &quot;secret sequence of bytes&quot;;
byte[] dataToDecrypt = new byte[] { -84,-66,-113,54,125,48,-28,-60,36,52,-57,109,105,-17,111,-12 };

MessageDigest digest = MessageDigest.getInstance(&quot;SHA&quot;);
digest.update(passPhrase.getBytes());

Key key = new SecretKeySpec(digest.digest(), 0, 16, &quot;AES&quot;);

Cipher cipher = Cipher.getInstance(&quot;AES/ECB/PKCS5Padding&quot;);
cipher.init(Cipher.DECRYPT_MODE, key);

byte[] decryptedData = cipher.doFinal(dataToDecrypt);

System.out.println(new String(decryptedData));
[/code]

<h2>Asymmetric (public key) encryption in Java</h2>

Asymmetric encryption, also known as <strong>public key encryption</strong> or <strong>public key cryptography</strong>, refers to a cryptographic algorithm which requires two separate keys, one of which is secret (or private) and one of which is public:
<ul>
	<li>the public key is used to encrypt;</li>
	<li>the private key is used to decrypt.</li>
</ul>

A common paradigm in a centralized client-server system is that a private key is held securely on the server, while the corresponding public key is distributed to all clients.

In Java, the keys will be instances of <a href="http://docs.oracle.com/javase/7/docs/api/java/security/PublicKey.html">java.security.PublicKey</a> and <a href="http://docs.oracle.com/javase/7/docs/api/java/security/PrivateKey.html">java.security.PrivateKey</a>. To generate a new pair:

[code lang="java"]
KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(&quot;RSA&quot;);
KeyPair keyPair = keyPairGenerator.generateKeyPair();
PublicKey publicKey = keyPair.getPublic();
PrivateKey privateKey = keyPair.getPrivate();
[/code]

The keys can also be transformed into byte arrays for storage and transmission:

[code lang="java"]
KeyFactory keyFactory = KeyFactory.getInstance(&quot;RSA&quot;);
byte[] publicKeyBytes = publicKey.getEncoded();
KeySpec keySpec = new X509EncodedKeySpec(publicKeyBytes);
PublicKey keyFromBytes = keyFactory.generatePublic(keySpec);
[/code]

Encryption example:

[code lang="java"]

String passPhrase = &quot;secret sequence of bytes&quot;;
byte[] dataToEncrypt = &quot;data to encrypt&quot;.getBytes();

MessageDigest digest = MessageDigest.getInstance(&quot;SHA&quot;);
digest.update(passPhrase.getBytes());

Cipher cipher = Cipher.getInstance(&quot;RSA/ECB/PKCS1Padding&quot;);
cipher.init(Cipher.ENCRYPT_MODE, publicKey);

byte[] encryptedData = cipher.doFinal(dataToEncrypt);

System.out.println(new String(encryptedData));
[/code]

Decryption example:

[code lang="java"]

String passPhrase = &quot;secret sequence of bytes&quot;;
byte[] dataToDecrypt = /* read from stream/file/etc */;

MessageDigest digest = MessageDigest.getInstance(&quot;SHA&quot;);
digest.update(passPhrase.getBytes());

Cipher cipher = Cipher.getInstance(&quot;RSA/ECB/PKCS1Padding&quot;);
cipher.init(Cipher.DECRYPT_MODE, privateKey);

byte[] decryptedData = cipher.doFinal(dataToDecrypt);

System.out.println(new String(decryptedData));
[/code]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>445</wp:post_id>
		<wp:post_date>2015-03-10 14:46:03</wp:post_date>
		<wp:post_date_gmt>2015-03-10 12:46:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-cryptography</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cryptography"><![CDATA[cryptography]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Set the Look and Feel in Java</title>
		<link>http://cristian.sulea.net/blog/set-the-look-and-feel-in-java/</link>
		<pubDate>Fri, 03 Apr 2015 13:15:39 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=488</guid>
		<description></description>
		<content:encoded><![CDATA[To programmatically specify a look and feel, use one of the methods:
<ul>
	<li><a href="http://docs.oracle.com/javase/7/docs/api/javax/swing/UIManager.html#setLookAndFeel(java.lang.String)">UIManager.setLookAndFeel(String className)</a></li>
	<li><a href="http://docs.oracle.com/javase/7/docs/api/javax/swing/UIManager.html#setLookAndFeel(javax.swing.LookAndFeel)">UIManager.setLookAndFeel(LookAndFeel newLookAndFeel)</a></li>
</ul>

For example, the following snippet makes the program use the <strong>Java Look & Feel</strong> for the current platform:

[code lang="java"]

public static void main(String[] args) {

  //
  // set the look and feel

  try {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  } catch (Exception e) {
    // ignore exception
  }

  //
  // create and show the GUI

  new SwingApplication();
}
[/code]

To specify a particular UI, you can use the actual class name. Here are some of the arguments you can use for ''#setLookAndFeel(String className)'' method:

<ul>
	<li><strong>UIManager.getCrossPlatformLookAndFeelClassName()</strong>
<ul>
	<li>Returns the string for the one look-and-feel guaranteed to work - the Java Look & Feel.</li>
</ul>
</li>
</ul>

<ul>
	<li><strong>UIManager.getSystemLookAndFeelClassName()</strong>
<ul>
	<li>Specifies the look and feel for the current platform. On Win32 platforms, this specifies the Windows Look & Feel. On Mac OS platforms, this specifies the Mac OS Look & Feel. On Sun platforms, it specifies the CDE/Motif Look & Feel.</li>
</ul>
</li>
</ul>

<ul>
	<li><strong>javax.swing.plaf.metal.MetalLookAndFeel</strong>
<ul>
	<li>Specifies the Java Look & Feel (the codename for this look and feel was Metal). This string is the value returned by the getCrossPlatformLookAndFeelClassName method.</li>
</ul>
</li>
</ul>

<ul>
	<li><strong>com.sun.java.swing.plaf.windows.WindowsLookAndFeel</strong>
<ul>
	<li>Specifies the Windows Look & Feel. Currently, you can use this look and feel only on Win32 systems.</li>
</ul>
</li>
</ul>

<ul>
	<li><strong>com.sun.java.swing.plaf.motif.MotifLookAndFeel</strong>
<ul>
	<li>Specifies the CDE/Motif Look & Feel. This look and feel can be used on any platform.</li>
</ul>
</li>
</ul>

<ul>
	<li><strong>javax.swing.plaf.mac.MacLookAndFeel</strong>
<ul>
	<li>Specifies the Mac OS Look & Feel, which can be used only on Mac OS platforms.</li>
</ul>
</li>
</ul>

You aren't limited to the preceding arguments. You can specify the name for any look and feel that is in your program's class path.


<h2>How the UI Manager Chooses the Look and Feel</h2>

Steps that occur when the UI manager first initializes itself:
<ol>
	<li>If the program sets the look and feel before any components are created, the UI manager tries to create an instance of the specified look-and-feel class. If successful, all components use that look and feel.</li>
	<li>If the program hasn't successfully specified a look and feel, then before the first component's UI is created, the UI manager tests whether the user specified a look and feel in a file named <code>swing.properties</code>. It looks for the file in the <code>lib</code> directory of the Java release. For example, if you're using the Java interpreter in <code>javaHomeDirectory\bin</code>, then the <code>swing.properties</code> file (if it exists) is in <code>javaHomeDirectory\lib</code>. If the user specified a look and feel, then again the UI manager tries to instantiate the specified class.</li>
	<li>If neither the program nor the user successfully specifies a look and feel, then the program uses the Java Look & Feel.</li>
</ol>

Example of a <code>swing.properties</code> file:

[code]
# Swing properties

swing.defaultlaf=com.sun.java.swing.plaf.motif.MotifLookAndFeel
[/code]

<h2>Change the Look and Feel After Startup</h2>

You can change the look and feel with <code>#setLookAndFeel</code> methods even after the program's GUI is visible. To make existing components reflect the new look and feel, invoke the <a href="http://docs.oracle.com/javase/7/docs/api/javax/swing/UIManager.html#setLookAndFeel(javax.swing.LookAndFeel)">SwingUtilities.updateComponentTreeUI(Component c)</a> method once per top-level container. Then you might wish to resize each top-level container to reflect the new sizes of its contained components.

For example:

[code lang="java"]
UIManager.setLookAndFeel(lafName);
SwingUtilities.updateComponentTreeUI(frame);
frame.pack();
[/code]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>488</wp:post_id>
		<wp:post_date>2015-04-03 16:15:39</wp:post_date>
		<wp:post_date_gmt>2015-04-03 13:15:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>set-the-look-and-feel-in-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="lf"><![CDATA[l&amp;f]]></category>
		<category domain="post_tag" nicename="laf"><![CDATA[laf]]></category>
		<category domain="post_tag" nicename="look-and-feel"><![CDATA[look and feel]]></category>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DokuWiki URL Rewriting in Apache</title>
		<link>http://cristian.sulea.net/blog/dokuwiki-url-rewriting-in-apache/</link>
		<pubDate>Thu, 02 Jul 2015 14:18:38 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=335</guid>
		<description></description>
		<content:encoded><![CDATA[By default, <a href="https://www.dokuwiki.org">DokuWiki</a> does no URL rewriting, resulting in URLs like this:

[code]
http://example.com/doku.php?id=page
[/code]

These URLs are considered ugly and are not indexed well by some search engines.

Rewriting URLs in Apache is done through the <code>mod_rewrite</code> module of <a href="http://httpd.apache.org/docs/1.3/mod/mod_rewrite.html">Apache 1</a> or <a href="http://httpd.apache.org/docs/2.0/mod/mod_rewrite.html">Apache 2</a>. The module is enabled in <code>httpd.conf</code> with the following line (make sure it is not commented out):

[code]
LoadModule rewrite_module modules/mod_rewrite.so
[/code]

On many kinds of Linux (Ubuntu, Debian, etc) you may enable <code>mod_rewrite</code> with:

[code]
sudo a2enmod rewrite
[/code]

The setup of module mod_rewrite is done through so-called <strong>rewrite rules</strong>, which can be either defined directly in the server's main config or in a <code>.htaccess</code> file located in DokuWiki's main directory. DokuWiki comes with an <code>.htaccess.dist</code> file which contains the needed rewrite rules for mode 1, but commented. Just copy the file to <code>.htaccess</code> (in the folder that contains <code>doku.php</code>, caveat Debian users) and uncomment the lines to enable rewriting.

In Debian 6 at least you do not have to copy anything. <code>/usr/share/dokuwiki/.htaccess</code> links to <code>/etc/dokuwiki/htaccess</code>. So there is no caveat anymore.

[code title=".htaccess"]
RewriteEngine on

RewriteBase /dokuwiki

RewriteRule ^_media/(.*)              lib/exe/fetch.php?media=$1  [QSA,L]
RewriteRule ^_detail/(.*)             lib/exe/detail.php?media=$1  [QSA,L]
RewriteRule ^_export/([^/]+)/(.*)     doku.php?do=export_$1&amp;id=$2  [QSA,L]
RewriteRule ^$                        doku.php  [L]
RewriteCond %{REQUEST_FILENAME}       !-f
RewriteCond %{REQUEST_FILENAME}       !-d
RewriteRule (.*)                      doku.php?id=$1  [QSA,L]
RewriteRule ^index.php$               doku.php
[/code]

Remember to set following in the Configuration Manager <code>/start?do=admin&amp;page=config</code>
<ul>
	<li>Use nice URLs: <code>.htaccess</code></li>
	<li>Use slash as namespace separator in URLs [<strong>x</strong>]</li>
</ul>
Otherwise rewrite rules will not be useful.

<h2>Resources</h2>
<ul>
	<li><a href="https://www.dokuwiki.org/rewrite">https://www.dokuwiki.org/rewrite</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>335</wp:post_id>
		<wp:post_date>2015-07-02 17:18:38</wp:post_date>
		<wp:post_date_gmt>2015-07-02 14:18:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dokuwiki-url-rewriting-in-apache</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dokuwiki"><![CDATA[dokuwiki]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="post_tag" nicename="wiki"><![CDATA[wiki]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_76f8e0124bdbb58e810c4bcbb9d27792</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Basic Package Management on Linux Debian</title>
		<link>http://cristian.sulea.net/blog/basic-package-management-on-linux-debian/</link>
		<pubDate>Fri, 10 Jul 2015 13:18:55 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=392</guid>
		<description></description>
		<content:encoded><![CDATA[Repository based package management operations on the Debian system can be performed by many APT-based package management tools available on the Debian system.

Basic package management tools:
<ul>
	<li>apt-get / apt-cache</li>
	<li>aptitude</li>
</ul>

<h2>apt-get / apt-cache</h2>

The <code>apt-get</code> and <code>apt-cache</code> commands are the most basic APT-based package management tools.
<ul>
	<li>offer only the <strong>command line user interface</strong>;</li>
	<li>is most suitable for the <strong>major system upgrade</strong> between releases, etc;</li>
	<li>offers a <strong>robust</strong> package dependency resolver;</li>
	<li>is <strong>less demanding</strong> on hardware resources (it consumes less memory and runs faster);</li>
	<li>offers a <strong>standard regex</strong> based search on the package name and description;</li>
	<li>can manage multiple versions of packages using <code>/etc/apt/preferences</code> but it is quite cumbersome.</li>
</ul>

<h2>aptitude</h2>

The <code>aptitude</code> command is the most versatile APT-based package management tool.
<ul>
	<li>offers the full screen <strong>interactive text user interface</strong>;</li>
	<li>offers the <strong>command line user interface</strong>, too;</li>
	<li>is most suitable for the <strong>daily interactive package management</strong> such as inspecting installed packages and searching available packages;</li>
	<li>is <strong>more demanding</strong> on hardware resources (it consumes more memory and runs slower);</li>
	<li>offers an <strong>enhanced regex</strong> based search on all of the package metadata;</li>
	<li>can manage multiple versions of packages without using <code>/etc/apt/preferences</code> and it is quite intuitive.</li>
</ul>

<h2>Operations with the command line using apt-get / apt-cache and aptitude</h2>

<ul>
	<li>update package archive metadata
<ul>
	<li><code>apt-get update</code></li>
	<li><code>aptitude update</code></li>
</ul>
</li>
</ul>

<ul>
	<li>install candidate version of "foo" package with its dependencies |
<ul>
	<li><code>apt-get install foo</code></li>
	<li><code>aptitude install foo</code></li>
</ul>
</li>
</ul>

<ul>
	<li>install candidate version of installed packages without removing any other packages
<ul>
	<li><code>apt-get upgrade</code></li>
	<li><code>aptitude safe-upgrade</code></li>
</ul>
</li>
</ul>

<ul>
	<li>install candidate version of installed packages while removing other packages if needed
<ul>
	<li><code>apt-get dist-upgrade</code></li>
	<li><code>aptitude full-upgrade</code></li>
</ul>
</li>
</ul>

<ul>
	<li>remove "foo" package while leaving its configuration files
<ul>
	<li><code>apt-get remove foo</code></li>
	<li><code>aptitude remove foo</code></li>
</ul>
</li>
</ul>

<ul>
	<li>remove auto-installed packages which are no longer required
<ul>
	<li><code>apt-get autoremove</code></li>
</ul>
</li>
</ul>

<ul>
	<li>purge "foo" package with its configuration files
<ul>
	<li><code>apt-get purge foo</code></li>
	<li><code>aptitude purge foo</code></li>
</ul>
</li>
</ul>

<ul>
	<li>clear out the local repository of retrieved package files completely
<ul>
	<li><code>apt-get clean</code></li>
	<li><code>aptitude clean</code></li>
</ul>
</li>
</ul>

<ul>
	<li>clear out the local repository of retrieved package files for outdated packages
<ul>
	<li><code>apt-get autoclean</code></li>
	<li><code>aptitude autoclean</code></li>
</ul>
</li>
</ul>

<ul>
	<li>display detailed information about "foo" package
<ul>
	<li><code>apt-cache show foo</code></li>
	<li><code>aptitude show foo</code></li>
</ul>
</li>
</ul>

<ul>
	<li>search packages which match
<ul>
	<li><code>apt-cache search &lt;regex&gt;</code></li>
	<li><code>aptitude search &lt;regex&gt;</code></li>
</ul>
</li>
</ul>

<ul>
	<li>explain the reason why matching packages should be installed
<ul>
	<li><code>aptitude why &lt;regex&gt;</code></li>
</ul>
</li>
</ul>

<ul>
	<li>explain the reason why matching packages can not be installed
<ul>
	<li><code>aptitude why-not &lt;regex&gt;</code></li>
</ul>
</li>
</ul>

<h2>Notable command options for aptitude</h2>

<ul>
	<li><code>-s</code> simulate the result of the command</li>
	<li><code>-d</code> download only but no install/upgrade</li>
	<li><code>-D</code> show brief explanations before the automatic installations and removals</li>
</ul>

<h2>Resources</h2>
<ul>
	<li><a href="http://www.debian.org/doc/manuals/debian-reference/ch02.en.html">http://www.debian.org/doc/manuals/debian-reference/ch02.en.html</a></li>
	<li><a href="http://www.debian.org/doc/manuals/debian-reference/ch02.en.html#_basic_package_management_operations">http://www.debian.org/doc/manuals/debian-reference/ch02.en.html#_basic_package_management_operations</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>392</wp:post_id>
		<wp:post_date>2015-07-10 16:18:55</wp:post_date>
		<wp:post_date_gmt>2015-07-10 13:18:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>basic-package-management-on-linux-debian</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apt-get"><![CDATA[apt-get]]></category>
		<category domain="post_tag" nicename="aptitude"><![CDATA[aptitude]]></category>
		<category domain="post_tag" nicename="debian"><![CDATA[debian]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<category domain="post_tag" nicename="package"><![CDATA[package]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_43a1e861d35bf6cba1a426804337aae1</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_9a0dd785e07fc0cc3479f3996c3ea4b9</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Linux - Change Password</title>
		<link>http://cristian.sulea.net/blog/linux-change-password/</link>
		<pubDate>Mon, 20 Jul 2015 13:30:00 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=423</guid>
		<description></description>
		<content:encoded><![CDATA[[code]
passwd
[/code]

<h2>Resources</h2>
<ul>
	<li><a href="http://www.cyberciti.biz/faq/linux-change-password/">http://www.cyberciti.biz/faq/linux-change-password/</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>423</wp:post_id>
		<wp:post_date>2015-07-20 16:30:00</wp:post_date>
		<wp:post_date_gmt>2015-07-20 13:30:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>linux-change-password</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="command"><![CDATA[command]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_966b50de61578e2c97f016c6e7011f7e</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Linux - Change Hostname</title>
		<link>http://cristian.sulea.net/blog/linux-change-hostname/</link>
		<pubDate>Mon, 20 Jul 2015 13:20:45 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=425</guid>
		<description></description>
		<content:encoded><![CDATA[[code]
hostname
[/code]

[code]
nano /etc/hostname
nano /etc/hosts
reboot
[/code]

<h2>Resources</h2>
<ul>
	<li><a href="https://wiki.debian.org/HowTo/ChangeHostname">https://wiki.debian.org/HowTo/ChangeHostname</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>425</wp:post_id>
		<wp:post_date>2015-07-20 16:20:45</wp:post_date>
		<wp:post_date_gmt>2015-07-20 13:20:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>linux-change-hostname</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="command"><![CDATA[command]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_38bcbde8824628e2be63b37d7e903a91</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Linux - Network Interfaces</title>
		<link>http://cristian.sulea.net/blog/linux-network-interfaces/</link>
		<pubDate>Mon, 20 Jul 2015 13:40:53 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=428</guid>
		<description></description>
		<content:encoded><![CDATA[[code]
ifconfig
[/code]

[code]
ifconfig eth0
[/code]

<h2>Resources</h2>
<ul>
	<li><a href="http://www.whatismyip.com/linux-ip-commands/">http://www.whatismyip.com/linux-ip-commands/</a></li>
	<li><a href="https://wiki.debian.org/NetworkConfiguration">https://wiki.debian.org/NetworkConfiguration</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>428</wp:post_id>
		<wp:post_date>2015-07-20 16:40:53</wp:post_date>
		<wp:post_date_gmt>2015-07-20 13:40:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>linux-network-interfaces</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="command"><![CDATA[command]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Package manager for Debian (dpkg command)</title>
		<link>http://cristian.sulea.net/blog/package-manager-for-debian-dpkg-command/</link>
		<pubDate>Tue, 21 Jul 2015 09:33:55 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=430</guid>
		<description></description>
		<content:encoded><![CDATA[[code]
dpkg --get-selections [package-name-pattern...]
[/code]

[code]
dpkg -L package-name
[/code]

Get list of package selections, and write it to stdout.
Without a pattern, non-installed packages (i.e. those which have been previously purged) will not be shown.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>430</wp:post_id>
		<wp:post_date>2015-07-21 12:33:55</wp:post_date>
		<wp:post_date_gmt>2015-07-21 09:33:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>package-manager-for-debian-dpkg-command</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="command"><![CDATA[command]]></category>
		<category domain="post_tag" nicename="debian"><![CDATA[debian]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[linux]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Cron Expressions Tutorial</title>
		<link>http://cristian.sulea.net/blog/cron-expressions-tutorial/</link>
		<pubDate>Mon, 03 Aug 2015 14:01:05 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=494</guid>
		<description></description>
		<content:encoded><![CDATA[Cron expressions are used to configure the scheduling of automated processes.
A cron expression is a string consisting of six or seven sub-expressions (fields), which describe individual details of the schedule:

[code gutter="false"]
* * * * * * *
¦ ¦ ¦ ¦ ¦ ¦ ¦
¦ ¦ ¦ ¦ ¦ ¦ +----- Year
¦ ¦ ¦ ¦ ¦ +------- Day of week
¦ ¦ ¦ ¦ +--------- Month
¦ ¦ ¦ +----------- Day of month
¦ ¦ +------------- Hours
¦ +--------------- Minutes
+----------------- Seconds
[/code]

So a cron expression can be as simple as this:
<code>1 * * * * ? *</code>

Or more complex, like this:
<code>0/5 14,18,3-39,52 * ? JAN,MAR,SEP MON-FRI 2002-2010</code>

The fields are as follows:

[code gutter="false"]
| Field  Name  | Mandatory | Allowed Values   | Allowed Special Characters |
----------------------------------------------------------------------------
| Seconds      | YES       | 0-59             | * / , -                    |
| Minutes      | YES       | 0-59             | * / , -                    |
| Hours        | YES       | 0-23             | * / , -                    |
| Day of month | YES       | 1-31             | * / , – ? L W              |
| Month        | YES       | 1-12 or JAN-DEC  | * / , -                    |
| Day of week  | YES       | 1-7 or SUN-SAT   | * / , – ? L #              |
| Year         | NO        | empty, 1970-2099 | * / , -                    |
[/code]

<h2>Examples</h2>

<ul>
	<li><code>0 0 12 * * ?</code>
<ul>
	<li>fire at 12pm (noon) every day</li>
</ul>
</li>
</ul>

<ul>
	<li><code>0 15 10 ? * *</code>
<ul>
	<li>fire at 10:15am every day</li>
</ul>
</li>
</ul>

<ul>
	<li><code>0 15 10 * * ?</code>
<ul>
	<li>fire at 10:15am every day</li>
</ul>
</li>
</ul>

<ul>
	<li><code>0 15 10 * * ? *</code>
<ul>
	<li>fire at 10:15am every day</li>
</ul>
</li>
</ul>

<ul>
	<li><code>0 15 10 * * ? 2005</code>
<ul>
	<li>fire at 10:15am every day during the year 2005</li>
</ul>
</li>
</ul>

<ul>
	<li><code>0 * 14 * * ?</code>
<ul>
	<li>fire every minute starting at 2pm and ending at 2:59pm, every day</li>
</ul>
</li>
</ul>

<ul>
	<li><code>0 0/5 14 * * ?</code>
<ul>
	<li>fire every 5 minutes starting at 2pm and ending at 2:55pm, every day</li>
</ul>
</li>
</ul>

<ul>
	<li><code>0 0/5 14,18 * * ?</code>
<ul>
	<li>fire every 5 minutes starting at 2pm and ending at 2:55pm, AND fire every 5 minutes starting at 6pm and ending at 6:55pm, every day</li>
</ul>
</li>
</ul>

<ul>
	<li><code>0 0-5 14 * * ?</code>
<ul>
	<li>fire every minute starting at 2pm and ending at 2:05pm, every day</li>
</ul>
</li>
</ul>

<ul>
	<li><code>0 10,44 14 ? 3 WED</code>
<ul>
	<li>fire at 2:10pm and at 2:44pm every Wednesday in the month of March</li>
</ul>
</li>
</ul>

<ul>
	<li><code>0 15 10 ? * MON-FRI</code>
<ul>
	<li>fire at 10:15am every Monday, Tuesday, Wednesday, Thursday and Friday</li>
</ul>
</li>
</ul>

<ul>
	<li><code>0 15 10 15 * ?</code>
<ul>
	<li>fire at 10:15am on the 15th day of every month</li>
</ul>
</li>
</ul>

<ul>
	<li><code>0 15 10 L * ?</code>
<ul>
	<li>fire at 10:15am on the last day of every month</li>
</ul>
</li>
</ul>

<ul>
	<li><code>0 15 10 ? * 6L</code>
<ul>
	<li>fire at 10:15am on the last Friday of every month</li>
</ul>
</li>
</ul>

<ul>
	<li><code>0 15 10 ? * 6L 2002-2005</code>
<ul>
	<li>fire at 10:15am on every last Friday of every month during the years 2002, 2003, 2004 and 2005</li>
</ul>
</li>
</ul>

<ul>
	<li><code>0 15 10 ? * 6#3</code>
<ul>
	<li>fire at 10:15am on the third Friday of every month</li>
</ul>
</li>
</ul>

<ul>
	<li><code>0 0 12 1/5 * ?</code>
<ul>
	<li>fire at 12pm (noon) every 5 days every month, starting on the first day of the month</li>
</ul>
</li>
</ul>

<ul>
	<li><code>0 11 11 11 11 ?</code>
<ul>
	<li>fire every November 11th at 11:11am</li>
</ul>
</li>
</ul>

<h2>Special characters</h2>

<ul>
	<li><strong>* (all values)</strong> - used to select all values within a field. For example, "*" in the minute field means "every minute"</li>
	<li><strong>? (no specific value)</strong> - useful when you need to specify something in one of the two fields in which the character is allowed, but not the other. For example, if I want my trigger to fire on a particular day of the month (say, the 10th), but don't care what day of the week that happens to be, I would put "10" in the day-of-month field, and "?" in the day-of-week field. See the examples below for clarification</li>
	<li><strong>- (hyphen)</strong> - used to specify ranges. For example, "10-12" in the hour field means "the hours 10, 11 and 12"</li>
	<li><strong>, (comma)</strong> - used to specify additional values. For example, "MON,WED,FRI" in the day-of-week field means "the days Monday, Wednesday, and Friday"</li>
	<li><strong>/ (slash)</strong> - used to specify increments. For example, "0/15" in the seconds field means "the seconds 0, 15, 30, and 45". And "5/15" in the seconds field means "the seconds 5, 20, 35, and 50". You can also specify '/' after the <code>character - in this case</code> is equivalent to having '0' before the '/'. '1/3' in the day-of-month field means "fire every 3 days starting on the first day of the month"</li>
	<li><strong>L (last)</strong> - has different meaning in each of the two fields in which it is allowed. For example, the value "L" in the day-of-month field means "the last day of the month" - day 31 for January, day 28 for February on non-leap years. If used in the day-of-week field by itself, it simply means "7" or "SAT". But if used in the day-of-week field after another value, it means "the last xxx day of the month" - for example "6L" means "the last friday of the month". When using the 'L' option, it is important not to specify lists, or ranges of values, as you'll get confusing results</li>
	<li><strong>W (weekday)</strong> - used to specify the weekday (Monday-Friday) nearest the given day. As an example, if you were to specify "15W" as the value for the day-of-month field, the meaning is: "the nearest weekday to the 15th of the month". So if the 15th is a Saturday, the trigger will fire on Friday the 14th. If the 15th is a Sunday, the trigger will fire on Monday the 16th. If the 15th is a Tuesday, then it will fire on Tuesday the 15th. However if you specify "1W" as the value for day-of-month, and the 1st is a Saturday, the trigger will fire on Monday the 3rd, as it will not 'jump' over the boundary of a month's days. The 'W' character can only be specified when the day-of-month is a single day, not a range or list of days</li>
	<li><strong># (hash)</strong> - used to specify "the nth" XXX day of the month. For example, the value of "6#3" in the day-of-week field means "the third Friday of the month" (day 6 = Friday and "#3" = the 3rd one in the month). Other examples: "2#1" = the first Monday of the month and "4#5" = the fifth Wednesday of the month. Note that if you specify "#5" and there is not 5 of the given day-of-week in the month, then no firing will occur that month</li>
</ul>

The <code>L</code> and <code>W</code> characters can also be combined in the day-of-month field to yield <code>LW</code>, which translates to "last weekday of the month".

The legal characters and the names of months and days of the week are not case sensitive. So <code>MON</code> is the same as <code>mon</code>.

<h2>Resources</h2>
<ul>
	<li><a href="http://en.wikipedia.org/wiki/Cron">Cron - Wikipedia</a></li>
	<li><a href="http://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm">Cron Expressions - Oracle Documentation</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>494</wp:post_id>
		<wp:post_date>2015-08-03 17:01:05</wp:post_date>
		<wp:post_date_gmt>2015-08-03 14:01:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cron-expressions-tutorial</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cron"><![CDATA[cron]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>API vs SPI</title>
		<link>http://cristian.sulea.net/blog/api-vs-spi/</link>
		<pubDate>Fri, 07 Aug 2015 11:31:11 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=519</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>API</strong> stands for <a href="https://en.wikipedia.org/wiki/Application_programming_interface">Application Programming Interface</a>, and is a mean for accessing a service/function provided by some kind of software or a platform. <strong>API</strong> is normally target for clients to access a service and its has the following properties:
<ul>
	<li>API is a programmatic way of accessing a service to achieve a certain behavior or output.</li>
	<li>From API evolution point of view, addition is no problem at all for clients.</li>
	<li>But API's once utilized by clients it can not (and should not) be altered / deleted unless there are an appropriate communications, since its a complete degradation of the client expectation.</li>
</ul>

<strong>SPI</strong> stands for <a href="https://en.wikipedia.org/wiki/Service_provider_interface">Service Provider Interface</a>, and is way to inject, extend or alter the behavior for software or a platform. <strong>SPI</strong> is targeted for providers and has the following properties:
<ul>
	<li>SPI is a way to extend / alter the behavior of a software or a platform (programmable vs. programmatic).</li>
	<li>SPI evolution is different that SPI evolution, in SPI removal is not an issue.</li>
	<li>Addition of SPI interfaces will cause problems and may break existing implementations.</li>
</ul>

Put differently, the API tells you what a specific class/method does for you and the SPI tells you what you must do to conform. So:
<ul>
	<li>the <strong>API</strong> is the description of classes/interfaces/methods/... that you <strong>call and use</strong> to achieve a goal</li>
	<li>the <strong>SPI</strong> is the description of classes/interfaces/methods/... that you <strong>extend and implement</strong> to achieve a goal</li>
</ul>

Usually API and SPI are separate. For example in JDBC the <a href="http://java.sun.com/javase/6/docs/api/java/sql/Driver.html">Driver</a> class is part of the SPI: if you simply want to use JDBC, you don't need to use it directly, but everyone who implements a JDBC driver must implement that class.

Sometimes they overlap, however. The <a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html">Connection</a> interface is both SPI and API: you use it routinely when you use a JDBC driver and it needs to be implemented by the developer of the JDBC driver.

<h2>Resources</h2>
<ul>
	<li><a href="http://mussabsharif.blogspot.ro/2011/08/api-vs-spi.html">Mussab Blogging!</a></li>
	<li><a href="http://stackoverflow.com/questions/2954372/difference-between-spi-and-api">Stack Overflow</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>519</wp:post_id>
		<wp:post_date>2015-08-07 14:31:11</wp:post_date>
		<wp:post_date_gmt>2015-08-07 11:31:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>api-vs-spi</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="api"><![CDATA[api]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="spi"><![CDATA[spi]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Design Patterns - Overview</title>
		<link>http://cristian.sulea.net/blog/design-patterns-overview/</link>
		<pubDate>Fri, 14 Aug 2015 12:46:43 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=534</guid>
		<description></description>
		<content:encoded><![CDATA[A design pattern is a common, well-described solution to a common software problem. Sensible use of design patterns results in increased code maintainability, since in addition to being a good solution to a common problem, design patterns can be recognized by other developers, thus reducing the learning curve when dealing with a particular piece of code.

<h2>Gang of Four (GOF)</h2>

In 1994, four authors Erich Gamma, Richard Helm, Ralph Johnson and John Vlissides published a book titled <strong>Design Patterns - Elements of Reusable Object-Oriented Software</strong> which initiated the concept of Design Pattern in Software Development.

These authors are collectively known as <strong>Gang of Four (GOF)</strong>. According to these authors design patterns are primarily based on the following principles of object orientated design:
<ul>
	<li>Program to an interface not an implementation.</li>
	<li>Favor object composition over inheritance.</li>
</ul>

<h2>Types of Design Patterns</h2>

As per the design pattern reference book "Design Patterns - Elements of Reusable Object-Oriented Software", there are 23 design patterns which can be classified in three categories: <strong>Creational</strong>, <strong>Structural</strong> and <strong>Behavioral</strong> patterns.

<h3>Creational Patterns</h3>

These design patterns provide a way to create objects while hiding the creation logic, rather than instantiating objects directly using new operator. This gives program more flexibility in deciding which objects need to be created for a given use case.

<h3>Structural Patterns</h3>

These design patterns concern class and object composition. Concept of inheritance is used to compose interfaces and define ways to compose objects to obtain new functionalities.

<h3>Behavioral Patterns</h3>

These design patterns are specifically concerned with communication between objects.

<h2>Resources</h2>
<ul>
	<li><a href="http://www.avajava.com/tutorials/categories/design-patterns">AVAJAVA Web Tutorials</a></li>
	<li><a href="http://www.tutorialspoint.com/design_pattern/index.htm">Tutorials Point</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>534</wp:post_id>
		<wp:post_date>2015-08-14 15:46:43</wp:post_date>
		<wp:post_date_gmt>2015-08-14 12:46:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>design-patterns-overview</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="design"><![CDATA[design]]></category>
		<category domain="post_tag" nicename="development"><![CDATA[development]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="category" nicename="java-design-patterns"><![CDATA[Java Design Patterns]]></category>
		<category domain="post_tag" nicename="pattern"><![CDATA[pattern]]></category>
		<category domain="post_tag" nicename="software"><![CDATA[software]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The JVM Architecture</title>
		<link>http://cristian.sulea.net/blog/the-jvm-architecture/</link>
		<pubDate>Mon, 07 Sep 2015 12:24:04 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=543</guid>
		<description></description>
		<content:encoded><![CDATA[The JRE is composed of the Java API and the JVM. The role of the JVM is to read the Java application through the Class Loader and execute it along with the Java API.

A virtual machine (VM) is a software implementation of a machine (i.e. a computer) that executes programs like a physical machine. Originally, Java was designed to run based on a virtual machine separated from a physical machine for implementing WORA (Write Once Run Anywhere), although this goal has been mostly forgotten. Therefore, the JVM runs on all kinds of hardware to execute the Java Bytecode without changing the Java execution code.

The JVM is responsible for the following:
<ul>
	<li>loading, verifying, and executing the byte code;</li>
	<li>providing a runtime environment for execution of byte code;</li>
	<li>memory management and garbage collection.</li>
</ul>

The major components of the JVM are as follows:
<ul>
	<li>Constant Pool</li>
	<li>Class Loader</li>
	<li>Heap Area</li>
	<li>Stack Area</li>
	<li>Register Area</li>
	<li>Execution Engine</li>
</ul>

<h2>Constant Pool</h2>

The constant pool is a pool of constants. In other words, it contains a list of all the constants contained in a class. Note that each class has its own constant pool in memory. The constants are literals that don't change over time.

<h2>Class Loader</h2>

This is responsible for loading the class files or byte code files. The class loader is responsible for loading classes and interfaces residing in the byte code. The three basic functions of the class loader include:
<ul>
	<li>loading byte code;</li>
	<li>linking (verification, memory allocation for byte code, and resolution or transformation of symbolic references to direct references);</li>
	<li>initialization of variables to their default values.</li>
</ul>

<h2>Heap Area</h2>

This is the region of memory where objects are stored. Note that if the size of an object cannot be determined at compilation time, such objects are stored in the heap; in other words, instances of classes. On the contrary, if the compiler can determine the size of an object at compilation time, such objects are placed in the stack in memory. An example would be variables belonging to fundamental data types.

The heap area also contains the Garbage Collected Heap. The garbage collected heap is an area of the memory within the context of the JVM where objects are stored. It de-allocates the memory occupied by these objects as and when they are no longer needed or referenced in the code. The GC works on the basis of two principles: reference counting and mark and sweep. Note that local object references reside in the stack whereas the actual objects are stored in the heap. The GC works in the background and releases memory when objects are no longer in use.

<h2>Stack Area</h2>

The JVM stores local variables and intermediate results of execution of methods in the stack. Note that each thread inside the JVM contains its own private stack. Also, each method contains its own method frame: The frame is created at the time the method is called and is deleted when the execution of the method is over.

<h2>Register Area</h2>

This contains the registers used by the JVM. The JVM contains four registers:
<ul>
	<li><strong>pc</strong> - this is the program counter or the register that points to the address of the currently executing instruction;</li>
	<li><strong>optop</strong> - this is the register that contains the address of the top of the operand stack;</li>
	<li><strong>frame</strong> - this register points to the execution environment of the currently executing method;</li>
	<li><strong>vars</strong> - this register points to the first local variable in the currently executing method.</li>
</ul>

<h2>Execution Engine</h2>

This is responsible for execution of the compiled code or byte code. The execution engine comprises of the following:
<ul>
	<li><strong>Just in Time Compiler (JIT)</strong> - compiles the byte code to machine language instructions at run time;</li>
	<li><strong>Virtual Processor</strong> - is responsible for processing the operation codes and executing them sequentially;</li>
	<li><strong>Interpreter</strong> - is responsible for reading the stream of byte code, interpreting the instructions, and then executing them through the virtual processor.</li>
</ul>

<h2>Resources</h2>
<ul>
	<li><a href="http://www.developer.com/java/data/understanding-the-jvm-architecture.html">Developer.com</a></li>
	<li><a href="https://dzone.com/articles/understanding-jvm-internals">DZone Java</a></li>
	<li><a href="http://www.cubrid.org/blog/dev-platform/understanding-jvm-internals/">CUBRID Blog</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>543</wp:post_id>
		<wp:post_date>2015-09-07 15:24:04</wp:post_date>
		<wp:post_date_gmt>2015-09-07 12:24:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-jvm-architecture</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="development"><![CDATA[development]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="software"><![CDATA[software]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How to Change the Logon Screen on Windows 7</title>
		<link>http://cristian.sulea.net/blog/how-to-change-the-logon-screen-on-windows-7/</link>
		<pubDate>Tue, 06 Oct 2015 14:21:36 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=560</guid>
		<description></description>
		<content:encoded><![CDATA[Windows 7 makes it possible to change the welcome screen that appears when you start your computer without any third-party software, but this setting is well hidden.

<h2>Enabling Custom Backgrounds</h2>

This feature is disabled by default, so you’ll have to enable it from the Registry Editor.

Launch the Registry Editor and navigate to the following key:

[code]
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\LogonUI\Background
[/code]

<a href="http://cristian.sulea.net/blog/wp-content/uploads/how-to-change-the-logon-screen-on-windows-7-1.png"><img class="aligncenter" src="http://cristian.sulea.net/blog/wp-content/uploads/how-to-change-the-logon-screen-on-windows-7-1.png" alt="How to Change the Logon Screen on Windows 7" width="716" height="372" /></a>

You’ll see an <code>DWORD</code> value named <code>OEMBackground</code>. If you don’t see it, right-click in the right pane, point to the New submenu and create a new DWORD value with this name.

Double-click the <code>OEMBackground</code> value and set its value to <code>1</code>.

<a href="http://cristian.sulea.net/blog/wp-content/uploads/how-to-change-the-logon-screen-on-windows-7-2.png"><img class="aligncenter" src="http://cristian.sulea.net/blog/wp-content/uploads/how-to-change-the-logon-screen-on-windows-7-2.png" alt="How to Change the Logon Screen on Windows 7" width="716" height="372" /></a>

<h2>Setting An Image</h2>

Your image file must be less than <code>256 KB</code> in size. It’s also a good idea to use an image file that matches the resolution of your monitor, so it won’t look stretched.

Windows looks for the custom logon screen background image in the following directory:

[code]
C:\Windows\System32\oobe\info\backgrounds
[/code]

Copy your desired background image to the backgrounds folder and name it <code>backgroundDefault.jpg</code>.

<a href="http://cristian.sulea.net/blog/wp-content/uploads/how-to-change-the-logon-screen-on-windows-7-3.png"><img class="aligncenter" src="http://cristian.sulea.net/blog/wp-content/uploads/how-to-change-the-logon-screen-on-windows-7-3.png" alt="how-to-change-the-logon-screen-on-windows-7-3" width="783" height="410" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>560</wp:post_id>
		<wp:post_date>2015-10-06 17:21:36</wp:post_date>
		<wp:post_date_gmt>2015-10-06 14:21:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-change-the-logon-screen-on-windows-7</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="logon"><![CDATA[logon]]></category>
		<category domain="post_tag" nicename="screen"><![CDATA[screen]]></category>
		<category domain="post_tag" nicename="windows"><![CDATA[windows]]></category>
		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Async and Defer (non-blocking JavaScript with HTML5)</title>
		<link>http://cristian.sulea.net/blog/async-and-defer-non-blocking-javascript-with-html5/</link>
		<pubDate>Wed, 07 Oct 2015 13:32:24 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=569</guid>
		<description></description>
		<content:encoded><![CDATA[Loading JavaScript is one of the biggest performance bottlenecks. A script tag causes the browser to halt rendering, load a file, and run the code (the script will be executed before parsing is resumed). For slow servers and heavy scripts this means that displaying the webpage will be delayed.

<a href="http://cristian.sulea.net/blog/wp-content/uploads/script.png"><img src="http://cristian.sulea.net/blog/wp-content/uploads/script.png" alt="script" width="100%" class="aligncenter size-full wp-image-590" /></a>

<a href="http://cristian.sulea.net/blog/wp-content/uploads/legend.png"><img src="http://cristian.sulea.net/blog/wp-content/uploads/legend.png" alt="legend" width="734" height="32" class="alignnone size-full wp-image-607" /></a>

<h2>&lt;script defer&gt;</h2> <strong>(deferred execution)</strong>

The browser will begin to download the deferred scripts in parallel without stopping page processing (during HTML parsing) and will only execute them after the parser has completed. A positive effect of this attribute is that the DOM will be available for the scripts.

The scripts downloaded with <code>defer</code> are also guaranteed to execute in the order that they appear in the document.

<a href="http://cristian.sulea.net/blog/wp-content/uploads/script-defer.png"><img src="http://cristian.sulea.net/blog/wp-content/uploads/script-defer.png" alt="script defer" width="100%" class="aligncenter size-full wp-image-592" /></a>

<h2>&lt;script async&gt;</h2>

<strong>(asynchronous execution)</strong>

The <code>async</code> is identical to <code>defer</code>, except that the script executes at the first opportunity after download (will pause the HTML parser to execute it when it has finished downloading).

<a href="http://cristian.sulea.net/blog/wp-content/uploads/script-async.png"><img src="http://cristian.sulea.net/blog/wp-content/uploads/script-async.png" alt="script async" width="100%" class="aligncenter size-full wp-image-594" /></a>

<h2>When should I use what?</h2>

Typically you want to use <code>async</code> where possible, then <code>defer</code> then no attribute.

Some general rules to follow:
<ul>
	<li>if the script is modular and does not rely on any scripts then use <code>async</code>;</li>
	<li>if the script relies upon or is relied upon by another script then use <code>defer</code>;</li>
	<li>if the script is small and is relied upon by an <code>async</code> script then use an inline script with no attributes placed above the <code>async</code> scripts.</li>
</ul>

<h2>Resources</h2>
<ul>
	<li><a href="http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html">async vs defer attributes</a></li>
	<li><a href="http://peter.sh/experiments/asynchronous-and-deferred-javascript-execution-explained/">Asynchronous and deferred JavaScript execution explained</a></li>
	<li><a href="http://www.sitepoint.com/non-blocking-async-defer/">Load Non-blocking JavaScript with HTML5 Async and Defer</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>569</wp:post_id>
		<wp:post_date>2015-10-07 16:32:24</wp:post_date>
		<wp:post_date_gmt>2015-10-07 13:32:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>async-and-defer-non-blocking-javascript-with-html5</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="async"><![CDATA[async]]></category>
		<category domain="post_tag" nicename="defer"><![CDATA[defer]]></category>
		<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>447</wp:comment_id>
			<wp:comment_author><![CDATA[Gulshan Kumar]]></wp:comment_author>
			<wp:comment_author_email>dreamergulshan@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.gulshankumar.net/about/</wp:comment_author_url>
			<wp:comment_author_IP>1.39.39.79</wp:comment_author_IP>
			<wp:comment_date>2015-12-22 18:53:49</wp:comment_date>
			<wp:comment_date_gmt>2015-12-22 16:53:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello Dear Author, love you post. I want to understand this JavaScript function for my WordPress Blog. Whenever I test any theme, I found 2 commons JavaScript blocking resource. First jquery and another jquery-migrate. I don't know what they do or Why it pre comes in most of the WordPress theme? Please tell me, For these two script., In which I should use async/defer?]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1450803230.0205409526824951171875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>How to Set Chrome As Default PDF Viewer</title>
		<link>http://cristian.sulea.net/blog/how-to-set-chrome-as-default-pdf-viewer/</link>
		<pubDate>Fri, 20 Nov 2015 08:20:20 +0000</pubDate>
		<dc:creator><![CDATA[cristian.sulea]]></dc:creator>
		<guid isPermaLink="false">http://cristian.sulea.net/blog/?p=612</guid>
		<description></description>
		<content:encoded><![CDATA[Right click on any PDF file, and select the "Open with" item on the menu (if you don't see this, you can usually hold Shift and right-click, and it will be there).

This will bring up the "<em>Open with</em>" dialog, which lets you choose what to open your PDF files with. If Google Chrome isn't listed, just click the "<em>Browse</em>" button.

<a href="http://cristian.sulea.net/blog/wp-content/uploads/open-with.png"><img src="http://cristian.sulea.net/blog/wp-content/uploads/open-with.png" alt="open-with" width="579" height="478" class="wp-image-614" /></a>

Don't forget to select the "<em>Always use the selected program to open this kind of file</em>" checkbox.

If you know where Google Chrome was installed, then just browse to that location. Otherwise, you can right-click on the Chrome shortcut, head to "<em>Properties</em>", and then "<em>Shortcut</em>". You'll see the location in the "<em>Target</em>" box (just to copy and paste the full path).

<a href="http://cristian.sulea.net/blog/wp-content/uploads/google-chrome-location.png"><img src="http://cristian.sulea.net/blog/wp-content/uploads/google-chrome-location.png" alt="google-chrome-location" width="377" height="533" class="wp-image-618" /></a>

Once you've selected "<em>chrome.exe</em>" and clicked the "<em>OK</em>" button, you're done.

<a href="http://cristian.sulea.net/blog/wp-content/uploads/google-chrome-pdf-view.png"><img src="http://cristian.sulea.net/blog/wp-content/uploads/google-chrome-pdf-view.png" alt="google-chrome-pdf-view" width="922" height="745" class="wp-image-626" /></a>

If is not working open "<em>chrome://plugins/</em>" in "<em>Google Chrome</em>" and make sure that the "<em>Chrome PDF Viewer</em>" is enabled.

<h2>Resources</h2>
<ul>
	<li><a href="http://www.howtogeek.com/howto/43764/how-to-enable-google-chrome-as-your-default-pdf-reader-the-easy-way/">How-To Geek</a></li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>612</wp:post_id>
		<wp:post_date>2015-11-20 10:20:20</wp:post_date>
		<wp:post_date_gmt>2015-11-20 08:20:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-set-chrome-as-default-pdf-viewer</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="chrome"><![CDATA[chrome]]></category>
		<category domain="post_tag" nicename="pdf"><![CDATA[pdf]]></category>
		<category domain="post_tag" nicename="windows"><![CDATA[windows]]></category>
		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
